(()=>{"use strict";var a=[{titulo:"Tostada con palta y huevo",tiempo:"5min",costo:80,img:"assets/img/panPalta.jpg",datos:{kcal:136,prot:4.5,grasas:5.4,carbs:26.1},ingredientes:[{item:"Pan Lactal integral",cant:"2",medida:"unidad",abbr:"u"},{item:"Palta",cant:"1",medida:"unidad",abbr:"u"},{item:"Heuvo",cant:"1 ",medida:"unidad",abbr:"u"},{item:"Sal",cant:"2 g",medida:"gramos",abbr:"g"},{item:"Pimienta",cant:"1 g",medida:"gramos",abbr:"g"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]},{titulo:"Pollo al limón con verduras",tiempo:"15min",costo:150,img:"assets/img/polloAlLimon.jpg",datos:{kcal:242,prot:7.8,grasas:6.5,carbs:36.6},ingredientes:[{item:"Pollo",cant:"1",medida:"kilo",abbr:"kg"},{item:"Huevos",cant:"2",medida:"unidad",abbr:"u"},{item:"Leche",cant:"300",medida:"mililitros",abbr:"ml"},{item:"Harina",cant:"150",medida:"gramos",abbr:"g"},{item:"Pan rallado",cant:"200",medida:"gramos",abbr:"g"},{item:"Sal",cant:"5",medida:"gramos",abbr:"g"},{item:"Crema bajas caloría",cant:"100",medida:"mililitros",abbr:"ml"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]},{titulo:"Crep de jamon y queso",tiempo:"10min",costo:150,img:"assets/img/crepJYQ.jpg",datos:{kcal:189,prot:6.2,grasas:5.8,carbs:42.1},ingredientes:[{item:"Huevo",cant:"1 u",medida:"unidad",abbr:"u"},{item:"Harina",cant:"10 g",medida:"gramos",abbr:"g"},{item:"Leche",cant:"100 ml",medida:"mililitros",abbr:"ml"},{item:"Jamon",cant:"30",medida:"gramos",abbr:"g"},{item:"Mozarela",cant:"40",medida:"gramos",abbr:"g"},{item:"Manteca",cant:"5",medida:"gramos",abbr:"g"},{item:"Sal",cant:"2",medida:"gramos",abbr:"g"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]},{titulo:"Berenjenas Parmesanas",tiempo:"30min",costo:210,img:"assets/img/berenjenasParme.jpg",datos:{kcal:280,prot:5.8,grasas:3.3,carbs:36.5},ingredientes:[{item:"berenjenas",cant:"1 Kilo",medida:"kilo",abbr:"kg"},{item:"Harina",cant:"100",medida:"gramos",abbr:"g"},{item:"Queso parmesano",cant:"250",medida:"gramos",abbr:"g"},{item:"Harina",cant:"150 g",medida:"gramos",abbr:"g"},{item:"Tomate triturado",cant:"500",medida:"gramos",abbr:"g"},{item:"Albahaca",cant:"1",medida:"unidad",abbr:"u"},{item:"Mozarella",cant:"500 g",medida:"gramos",abbr:"g"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]}],e=function(a){var e=JSON.stringify(a);localStorage.setItem("planio",e)},i=document.getElementById("perfil1Button");var t=document.getElementById("perfil2Button");null!==i&&i.addEventListener("click",(function(a){e({}),a.preventDefault(),location.href="http://"+location.host+"/perfil2.html"}),!0),null!==t&&t.addEventListener("click",(function(i){i.preventDefault();var t={};t.comidas=a,e(t),location.href="http://"+location.host+"/perfil3.html"}),!0),document.getElementById("volver").addEventListener("click",(function(){history.back()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,