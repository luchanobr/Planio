(()=>{"use strict";var t=function(){var t=localStorage.getItem("planio");return JSON.parse(t)},e=function(){return(e=Object.assign||function(t){for(var e,a=1,n=arguments.length;a<n;a++)for(var s in e=arguments[a])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}).apply(this,arguments)},a=t().receta||{titulo:"Pollo al limón con verduras",tiempo:"15min",costo:150,img:"assets/img/polloAlLimon.jpg",datos:{kcal:242,prot:7.8,grasas:6.5,carbs:36.6},ingredientes:[{item:"Pollo",cant:"1 kilo"},{item:"Huevos",cant:"2 u"},{item:"Leche",cant:"300 ml"},{item:"Harina",cant:"150 g"},{item:"Pan rallado",cant:"200 g"},{item:"Sal",cant:"5 g"},{item:"Crema bajas caloría",cant:"100 ml"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]};!function(t){var e=document.getElementById("receta"),a=1;e.innerHTML='<div class="receta-video"  id="video" style=" background: linear-gradient(\n\t\t\trgba(0, 0, 0, 0.3),\n\t\t\trgba(0, 0, 0, 0.3),\n\t\t\trgba(0, 0, 0, 0.3),\n\t\t\trgba(0, 0, 0, 0.3)\n\t\t),\n\t\turl('+t.img+'); background-size: cover">\n\t\t\t\t<div class="w100 d-flex justify-content-between flex-wrap align-self-start">\n\t\t\t\t<button class="btn-icon white" id="volver" aria-label="volver" >\n\t\t\t\t\t<i class="fas fa-arrow-left"></i>\n\t\t\t\t</button>\n\t\t\t\t<button class="btn-icon white" aria-label="favorita" >\n\t\t\t\t\t\t<i class="far fa-heart" aria-hidden="true"></i>\n\t\t\t\t</button>\n\n\n\t\t\t\t</div>\n\t\t\t\t<div class="w100 " >\n\t\t\t\t\t<h1 class="white ml-2 h1">'+t.titulo+'</h1>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id="tabs" class="tabs">\n\t\t\t\t<div class="expand-container">\n\t\t\t\t\t<button class="expand" id="toggle"></button>\n\t\t\t\t</div>\n\t\t\t\t<div class="tab-container" role="tablist" aria-expanded="false" >\n\t\t\t\t\t<button class="tab-button black" role="tab" id="tb1" aria-selected="true">Ingredientes</button>\n\t\t\t\t\t<button class="tab-button" role="tab" id="tb2" aria-selected="false"  >Receta</button>\n\t\t\t\t</div>\n\t\t\t\t<div class="brand w100 d-flex justify-content-spaceEvenly mt-1">\n\t\t\t\t\t <div class="d-flex justify-content-center">\n\t\t\t\t\t\t<button class=" btn-math" aria-label="menos" id="menos" disabled ><i class="fas fa-minus fa-sm" aria-hidden="true" ></i></button>\n\t\t\t\t\t\t<input type=number id="porciones" min="1" max="4" readonly="true" value="1" aria-label="porciones">\n\t\t\t\t\t\t<button class=" btn-math" aria-label="mas" id="mas" ><i class="fas fa-plus fa-sm" aria-hidden="true"></i></button>\n\t\t\t\t\t </div>\n\t\t\t\t\t<span class="brand mr-05">\n\t\t\t\t\t\t<i class="far fa-clock fa-sm"></i> '+t.tiempo+'\n\t\t\t\t\t</span>\n\t\t\t\t\t<span class="ml-05">\n\t\t\t\t\t\t<i class="fas fa-dollar-sign fa-sm"></i> '+t.costo+'\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tid="ingredientes"\n\t\t\t\t\trole="tabpanel"\n\t\t\t\t\tclass="tab-content w100"\n\t\t\t\t\taria-labelledby="tb1"\n\t\t\t\t\ttabindex="0"\n\n\t\t\t\t>\n\t\t\t\t\t<div class="d-flex justify-content-spaceEvenly mt-1 w100">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="d-flex flex-column justify-content-center text-center small"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span>Calorías</span><span id="kcal">'+t.datos.kcal*a+'</span><span>kcal </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="separador-datos"></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="d-flex flex-column justify-content-center text-center small"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span>Proteinas</span><span id="prot">'+t.datos.prot*a+'</span><span>Gramos </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="separador-datos"></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="d-flex flex-column justify-content-center text-center small"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span>Grasas</span><span id="grasas">'+t.datos.grasas*a+'</span><span>Gramos </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="separador-datos"></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="d-flex flex-column justify-content-center text-center small"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span aria-label="Carbohidratos">Carbs.</span><span id="carbs">'+t.datos.carbs*a+'</span\n\t\t\t\t\t\t\t><span>Gramos </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n                    <ul class="w80 text-light" id="ul-ingredientes">\n\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div id="pasos" class="tab-content w100 display-none" role="tabpanel" aria-labelledby="tb1" tabindex="0">\n                    <ol class="w80" id="ol-pasos">\n\t\t\t\t\t</ol>\n                </div>\n\n            </div>';var n=document.getElementById("porciones"),s=document.getElementById("toggle"),i=document.getElementById("tabs"),l=document.getElementById("ingredientes"),o=document.getElementById("pasos"),d=document.querySelector('[role="tablist"]'),r=document.getElementById("video"),c=document.getElementById("menos"),u=document.getElementById("mas");c.addEventListener("click",(function(){"1"==n.value||(n.value=(parseInt(n.value)-1).toString(),b(),"1"==n.value&&c.setAttribute("disabled","true"))})),u.addEventListener("click",(function(){"4"==n.value||(n.value=(parseInt(n.value)+1).toString(),b(),c.removeAttribute("disabled"))})),t.ingredientes.map((function(t){var e=document.getElementById("ul-ingredientes"),a=document.createElement("li");a.classList.add("d-flex","justify-content-between","mx-1","my-1"),a.innerHTML="  <span>"+t.item+"</span><span>"+t.cant+"</span>",e.appendChild(a)})),t.pasos.map((function(t,e){var a=document.getElementById("ol-pasos"),n=document.createElement("li");n.innerHTML='<p class="text-light">\n\t\t\t\t\t\t\t\t<span class="h5">Paso '+(e+1)+"</span>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t"+t+"\n                            </p>",a.appendChild(n)}));var m=0,p=document.getElementById("tb1"),v=document.getElementById("tb2");p.addEventListener("click",(function(){i.classList.contains("expanded")||(i.classList.add("expanded"),i.classList.remove("contraer"),d.setAttribute("aria-expanded","true"),r.classList.toggle("align-content-start")),p.classList.add("black"),v.classList.remove("black"),l.classList.remove("display-none"),o.classList.add("display-none")})),v.addEventListener("click",(function(){i.classList.contains("expanded")||(i.classList.add("expanded"),i.classList.remove("contraer"),d.setAttribute("aria-expanded","true"),r.classList.toggle("align-content-start")),p.classList.remove("black"),v.classList.add("black"),l.classList.add("display-none"),o.classList.remove("display-none")}));var b=function(){a=parseInt(n.value),document.getElementById("kcal").innerHTML=(t.datos.kcal*a).toFixed(0).toString(),document.getElementById("grasas").innerHTML=(t.datos.grasas*a).toFixed(1).toString(),document.getElementById("prot").innerHTML=(t.datos.prot*a).toFixed(1).toString(),document.getElementById("carbs").innerHTML=(t.datos.carbs*a).toFixed(1).toString()};s.addEventListener("click",(function(){i.classList.contains("expanded")?(i.classList.add("contraer"),i.classList.remove("expanded"),d.setAttribute("aria-expanded","false"),r.classList.toggle("align-content-start")):(i.classList.add("expanded"),i.classList.remove("contraer"),d.setAttribute("aria-expanded","true"),r.classList.toggle("align-content-start"))})),s.addEventListener("touchstart",(function(t){m=t.changedTouches[0].clientY})),s.addEventListener("touchend",(function(t){var e=t.changedTouches[0].clientY,a=m-e;Math.abs(a)<=30||(a>0?(i.classList.add("expanded"),i.classList.remove("contraer"),d.setAttribute("aria-expanded","false"),r.classList.toggle("align-content-start")):(i.classList.add("contraer"),i.classList.remove("expanded"),d.setAttribute("aria-expanded","true"),r.classList.toggle("align-content-start")))})),d.addEventListener("keydown",(function(t){var e=t.target;"ArrowRight"!==t.key&&"ArrowLeft"!==t.key||"tb1"!==e.id?"ArrowRight"!==t.key&&"ArrowLeft"!==t.key||"tb2"!==e.id||(console.log("arrow izq"),p.focus()):(console.log("arrow derecha"),v.focus())}))}(a),document.getElementById("reemplazar").addEventListener("click",(function(){var n=t(),s=e({},n);"desayuno"===s.comida&&(s.comidas[0]=a),"almuerzo"===s.comida&&(s.comidas[1]=a),"merienda"===s.comida&&(s.comidas[2]=a),"cena"===s.comida&&(s.comidas[3]=a),function(t){var e=JSON.stringify(t);localStorage.setItem("planio",e)}(s),location.href="http://"+location.host+"/reemplazo.html"})),document.getElementById("volver").addEventListener("click",(function(){history.back()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,