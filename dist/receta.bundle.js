(()=>{"use strict";var t;!function(t){var n=document.getElementById("receta"),e=1;n.innerHTML='<div class="receta-video"  style=" background: linear-gradient(\n\t\t\trgba(0, 0, 0, 0.3),\n\t\t\trgba(0, 0, 0, 0.3),\n\t\t\trgba(0, 0, 0, 0.3),\n\t\t\trgba(0, 0, 0, 0.3)\n\t\t),\n\t\turl('+t.img+'); background-size: cover">\n\t\t\t\t<div class="w100 h15">\n\t\t\t\t\t<button class="btn-icon white" id="volver" >\n\t\t\t\t\t\t<i class="fas fa-arrow-left"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class="w100 d-flex justify-content-center h15">\n\t\t\t\t\t<button class="btn-icon white">\n\t\t\t\t\t\t<i class="far fa-play-circle fa-6x"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class="w100 h20">\n\t\t\t\t\t<h1 class="white ml-2 h1">'+t.titulo+'</h1>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id="tabs" class="tabs">\n\t\t\t\t<div class="expand-container">\n\t\t\t\t\t<button class="expand" id="toggle"></button>\n\t\t\t\t</div>\n\t\t\t\t<div class="tab-container" role="tablist" >\n\t\t\t\t\t<button class="tab-button black" role="tab" id="tb1" aria-selected="true">Ingredientes</button>\n\t\t\t\t\t<button class="tab-button" role="tab" id="tb2" aria-selected="false"  >Receta</button>\n\t\t\t\t</div>\n\t\t\t\t<div class="brand w100 d-flex justify-content-spaceEvenly mt-1">\n\t\t\t\t\t<select aria-label="porciones" id="porciones" class="select">\n\t\t\t\t\t\t<option value="1">1 porción</option>\n\t\t\t\t\t\t<option value="2">2 porciones</option>\n\t\t\t\t\t\t<option value="3">3 porciones</option>\n\t\t\t\t\t\t<option value="4">4 porciones</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<span class="brand mr-05">\n\t\t\t\t\t\t<i class="far fa-clock fa-sm"></i> '+t.tiempo+'\n\t\t\t\t\t</span>\n\t\t\t\t\t<span class="ml-05">\n\t\t\t\t\t\t<i class="fas fa-dollar-sign fa-sm"></i> '+t.costo+'\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tid="ingredientes"\n\t\t\t\t\trole="tabpanel"\n\t\t\t\t\tclass="tab-content w100"\n\t\t\t\t\taria-labelledby="tb1"\n\t\t\t\t\ttabindex="0"\n\n\t\t\t\t>\n\t\t\t\t\t<div class="d-flex justify-content-spaceEvenly mt-1 w100">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="d-flex flex-column justify-content-center text-center small"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span>Calorías</span><span id="kcal">'+t.datos.kcal*e+'</span><span>kcal </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="separador-datos"></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="d-flex flex-column justify-content-center text-center small"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span>Proteinas</span><span id="prot">'+t.datos.prot*e+'</span><span>Gramos </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="separador-datos"></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="d-flex flex-column justify-content-center text-center small"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span>Grasas</span><span id="grasas">'+t.datos.grasas*e+'</span><span>Gramos </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="separador-datos"></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="d-flex flex-column justify-content-center text-center small"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span aria-label="Carbohidratos">Carbs.</span><span id="carbs">'+t.datos.carbs*e+'</span\n\t\t\t\t\t\t\t><span>Gramos </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n                    <ul class="w80 text-light" id="ul-ingredientes">\n\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div id="pasos" class="tab-content w100 display-none" role="tabpanel" aria-labelledby="tb1" tabindex="0">\n                    <ol class="w80" id="ol-pasos">\n\t\t\t\t\t</ol>\n                </div>\n\n            </div>';var a=document.getElementById("porciones"),s=document.getElementById("toggle"),i=document.getElementById("tabs"),o=document.getElementById("ingredientes"),l=document.getElementById("pasos"),d=document.querySelector('[role="tablist"]');t.ingredientes.map((function(t){var n=document.getElementById("ul-ingredientes"),e=document.createElement("li");e.classList.add("d-flex","justify-content-between","mx-1","my-1"),e.innerHTML="  <span>"+t.item+"</span><span>"+t.cant+"</span>",n.appendChild(e)})),t.pasos.map((function(t,n){var e=document.getElementById("ol-pasos"),a=document.createElement("li");a.innerHTML='<p class="text-light">\n\t\t\t\t\t\t\t\t<span class="h5">Paso '+(n+1)+"</span>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t"+t+"\n                            </p>",e.appendChild(a)}));var c=0,r=document.getElementById("tb1"),p=document.getElementById("tb2");r.addEventListener("click",(function(){i.classList.contains("expanded")||(i.classList.add("expanded"),i.classList.remove("contraer")),r.classList.add("black"),p.classList.remove("black"),o.classList.remove("display-none"),l.classList.add("display-none")})),p.addEventListener("click",(function(){i.classList.contains("expanded")||(i.classList.add("expanded"),i.classList.remove("contraer")),r.classList.remove("black"),p.classList.add("black"),o.classList.add("display-none"),l.classList.remove("display-none")})),a.addEventListener("change",(function(){e=parseInt(a.value),document.getElementById("kcal").innerHTML=(t.datos.kcal*e).toFixed(0).toString(),document.getElementById("grasas").innerHTML=(t.datos.grasas*e).toFixed(1).toString(),document.getElementById("prot").innerHTML=(t.datos.prot*e).toFixed(1).toString(),document.getElementById("carbs").innerHTML=(t.datos.carbs*e).toFixed(1).toString()})),s.addEventListener("click",(function(){i.classList.contains("expanded")?(i.classList.add("contraer"),i.classList.remove("expanded")):(i.classList.add("expanded"),i.classList.remove("contraer"))})),s.addEventListener("touchstart",(function(t){c=t.changedTouches[0].clientY})),s.addEventListener("touchend",(function(t){var n=t.changedTouches[0].clientY,e=c-n;Math.abs(e)<=30||(e>0?(i.classList.add("expanded"),i.classList.remove("contraer")):(i.classList.add("contraer"),i.classList.remove("expanded")))})),d.addEventListener("keydown",(function(t){var n=t.target;"ArrowRight"!==t.key&&"ArrowLeft"!==t.key||"tb1"!==n.id?"ArrowRight"!==t.key&&"ArrowLeft"!==t.key||"tb2"!==n.id||(console.log("arrow izq"),r.focus()):(console.log("arrow derecha"),p.focus())}))}((t=localStorage.getItem("planio"),JSON.parse(t)).receta||{titulo:"Pollo al limón con verduras",tiempo:"15min",costo:150,img:"assets/img/polloAlLimon.jpg",datos:{kcal:242,prot:7.8,grasas:6.5,carbs:36.6},ingredientes:[{item:"Pollo",cant:"1 kilo"},{item:"Huevos",cant:"2 u"},{item:"Leche",cant:"300 ml"},{item:"Harina",cant:"150 g"},{item:"Pan rallado",cant:"200 g"},{item:"Sal",cant:"5 g"},{item:"Crema bajas caloría",cant:"100 ml"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]}),document.getElementById("reemplazar").addEventListener("click",(function(){location.href="http://"+location.host+"/reemplazo.html"})),document.getElementById("volver").addEventListener("click",(function(){history.back()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wbGFuaW8vLi9zcmMvZGIudHMiLCJ3ZWJwYWNrOi8vcGxhbmlvLy4vc3JjL3N0b3JlLnRzIiwid2VicGFjazovL3BsYW5pby8uL3NyYy9yZWNldGEudHMiLCJ3ZWJwYWNrOi8vcGxhbmlvLy4vc3JjL3V0aWwudHMiXSwibmFtZXMiOlsiZGF0YSIsInJlY2V0YSIsIm1haW4iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicG9yY2lvbmVzIiwiaW5uZXJIVE1MIiwiaW1nIiwidGl0dWxvIiwidGllbXBvIiwiY29zdG8iLCJkYXRvcyIsImtjYWwiLCJwcm90IiwiZ3Jhc2FzIiwiY2FyYnMiLCJzZWxlY3QiLCJidXR0b24iLCJ0YWJzIiwiaW5ncmVkaWVudGVzIiwicGFzb3MiLCJ0YWJMaXN0IiwicXVlcnlTZWxlY3RvciIsIm1hcCIsImluZ3JlZGllbnRlIiwidWwiLCJsaSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJpdGVtIiwiY2FudCIsImFwcGVuZENoaWxkIiwicGFzbyIsImluZGV4Iiwib2wiLCJ0b3VjaFN0YXJZIiwidGJJbmdyZWRpZW50ZXMiLCJ0YlBhc29zIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNvbnRhaW5zIiwicmVtb3ZlIiwicGFyc2VJbnQiLCJ2YWx1ZSIsInRvRml4ZWQiLCJ0b1N0cmluZyIsImUiLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFkiLCJ0b3VjaEVuZCIsInJlc3VsdCIsIk1hdGgiLCJhYnMiLCJ0YXJnZXQiLCJrZXkiLCJpZCIsImNvbnNvbGUiLCJsb2ciLCJmb2N1cyIsInNldFJlY2V0YSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJsb2NhdGlvbiIsImhyZWYiLCJob3N0IiwiaGlzdG9yeSIsImJhY2siXSwibWFwcGluZ3MiOiJtQkFBTyxJQ0tDQSxHQ0RSLFNBQW1CQyxHQUNmLElBQUlDLEVBQU9DLFNBQVNDLGVBQWUsVUFDL0JDLEVBQVksRUFr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QWUsVUFDOUJtQyxpQkFBaUIsU0NsSVYsV0FDaEI0QixRQUFRQyxXIiwiZmlsZSI6InJlY2V0YS5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHByZWZlcmVuY2lhcyA9IFtcbiAgICB7XG4gICAgICAgIHVybDogJ2Fzc2V0cy9pbWcvY2hpbGkucG5nJyxcbiAgICAgICAgZm9uZG86ICcgcmdiKDI1NSwxNzMsIDE1NCknLFxuICAgICAgICB0aXR1bG86ICdDaGlsaScsXG4gICAgICAgIGRlc2NyaXBjaW9uOiAnUGltZW50b24sIGFqb3MgbyBtb3Jyb25lcyBkZSBkaXZlcnNvcyB0aXBvcy4gU29uIHV0aWxpemFkb3MgZW4gZGl2ZXJzYXMgcmVjZXRhcy4nLFxuICAgIH0sXG4gICAge1xuICAgICAgICB1cmw6ICdhc3NldHMvaW1nL29zdHJhcy5wbmcnLFxuICAgICAgICBmb25kbzogJ3JnYigxNzQsIDI1NCwgMjA5KScsXG4gICAgICAgIHRpdHVsbzogJ09zdHJhcycsXG4gICAgICAgIGRlc2NyaXBjaW9uOiAnUG9zZWVuIHVuIGdyYW4gdmFsb3IgbnV0cmljaW9uYWwgeSBzb24gdXRpbGl6YWRhcyBtYXlvcm1lbnRlIGNvbW8gYWNvbXBhw7FhbWllbnRvLicsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHVybDogJ2Fzc2V0cy9pbWcvaHVldm9zLnBuZycsXG4gICAgICAgIGZvbmRvOiAncmdiKDE5MCwgMTgyLCAxNDApJyxcbiAgICAgICAgdGl0dWxvOiAnaHVldm9zJyxcbiAgICAgICAgZGVzY3JpcGNpb246ICdFcyB1biBhbGltZW50byBtdXkgcHLDoWN0aWNvIHkgYWx0YW1lbnRlIG51dHJpdGl2byBxdWUgZGViZSBmb3JtYXIgcGFydGUgZGUgbGEgZGlldGEgaGFiaXR1YWwuJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdXJsOiAnYXNzZXRzL2ltZy9icm9jb2xpLnBuZycsXG4gICAgICAgIGZvbmRvOiAncmdiKDE3NCwgMjU0LCAyMDkpJyxcbiAgICAgICAgdGl0dWxvOiAnQnJvY29saScsXG4gICAgICAgIGRlc2NyaXBjaW9uOiAnUmljbyBlbiBwcm90ZcOtbmFzLCBoaWVycm8sIGNhbGNpbywgdml0YW1pbmFzIHkgbWluZXJhbGVzLCB1biBwcm9kdWN0byBlc2VuY2lhbCBwYXJhIGFxdWVsbG9zIHF1ZSBidXNjYW4gdW4gYWxpbWVudG8gc2FsdWRhYmxlLicsXG4gICAgfSxcbl07XG5leHBvcnQgdmFyIHJlY2V0YXMgPSBbXG4gICAge1xuICAgICAgICB0aXR1bG86ICdQb2xsbyBhbCBsaW3Ds24gY29uIHZlcmR1cmFzJyxcbiAgICAgICAgdGllbXBvOiAnMTVtaW4nLFxuICAgICAgICBjb3N0bzogMTUwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL3BvbGxvQWxMaW1vbi5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMjQyLFxuICAgICAgICAgICAgcHJvdDogNy44LFxuICAgICAgICAgICAgZ3Jhc2FzOiA2LjUsXG4gICAgICAgICAgICBjYXJiczogMzYuNixcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BvbGxvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSBraWxvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0h1ZXZvcycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdMZWNoZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwMCBtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdIYXJpbmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxNTAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQYW4gcmFsbGFkbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzUgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDcmVtYSBiYWphcyBjYWxvcsOtYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwMCBtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ1dvayBkZSB2ZXJkdXJhcycsXG4gICAgICAgIHRpZW1wbzogJzE1bWluJyxcbiAgICAgICAgY29zdG86IDE1MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy93b2tWZXJkdXJhcy5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMTUyLFxuICAgICAgICAgICAgcHJvdDogMy4xLFxuICAgICAgICAgICAgZ3Jhc2FzOiAxLjUsXG4gICAgICAgICAgICBjYXJiczogMTIuMSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1phbmFob3JpYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNb3Jyb24gcm9qbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdMZWNoZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwMCBtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdIYXJpbmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxNTAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQYW4gcmFsbGFkbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzUgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDcmVtYSBiYWphcyBjYWxvcsOtYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwMCBtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ0ZhbGFmZWwgY29uIEJhYmEgR2Fub3VzaCcsXG4gICAgICAgIHRpZW1wbzogJzMwbWluJyxcbiAgICAgICAgY29zdG86IDIwMCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9mYWxhZmVsLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAzNTAsXG4gICAgICAgICAgICBwcm90OiAxMC4xLFxuICAgICAgICAgICAgZ3Jhc2FzOiA0LjUsXG4gICAgICAgICAgICBjYXJiczogODUuMSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BhbiBkZSBQaXRhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMyB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NoaWxpJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NpbGFudHJvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMS8yIGF0YWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0dhcmJhbnpvcycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMiBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0xlY2h1Z2EnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxLzIgcGxhbnRhJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NlYm9sbGEgbW9yYWRhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1lvZ3VydCBuYXR1cmFsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAwIG1sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0xpbWEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIHUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdDdXJyeSBkZSBCcsOzY29saScsXG4gICAgICAgIHRpZW1wbzogJzI1bWluJyxcbiAgICAgICAgY29zdG86IDE3MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9jdXJyeUJyb2NvbGkuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDEyNSxcbiAgICAgICAgICAgIHByb3Q6IDQuMyxcbiAgICAgICAgICAgIGdyYXNhczogMC42LFxuICAgICAgICAgICAgY2FyYnM6IDIwLjEsXG4gICAgICAgIH0sXG4gICAgICAgIGluZ3JlZGllbnRlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdCcsOzY29saScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMgcGxhbnRhcycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNb3Jyb24gdmVyZGUnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIHUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQ3VycnknLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIGNkYScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDZWJvbGxhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0xlY2hlJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMjAwIG1sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NhbGRvIGRlIHZlcmR1cmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICczMDAgbWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnRXNwaW5hY2EnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIGF0YWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0FqbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgZGllbnRlcycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ0JlcmVuamVuYXMgUGFybWVzYW5hcycsXG4gICAgICAgIHRpZW1wbzogJzMwbWluJyxcbiAgICAgICAgY29zdG86IDIxMCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9iZXJlbmplbmFzUGFybWUuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDI4MCxcbiAgICAgICAgICAgIHByb3Q6IDUuOCxcbiAgICAgICAgICAgIGdyYXNhczogMy4zLFxuICAgICAgICAgICAgY2FyYnM6IDM2LjUsXG4gICAgICAgIH0sXG4gICAgICAgIGluZ3JlZGllbnRlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdiZXJlbmplbmFzJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSBLaWxvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0hhcmluYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1F1ZXNvIHBhcm1lc2FubycsXG4gICAgICAgICAgICAgICAgY2FudDogJzI1MCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0hhcmluYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzE1MCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1RvbWF0ZSB0cml0dXJhZG8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1MDAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBbGJhaGFjYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgYXRhZG8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTW96YXJlbGxhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNTAwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdFbnNhbGFkYSBUaGFpIGRlIEZpZGVvcyBkZSBBcnJveicsXG4gICAgICAgIHRpZW1wbzogJzE1bWluJyxcbiAgICAgICAgY29zdG86IDEyMCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9lbnNhbGFkYVRoYWkuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDEwMixcbiAgICAgICAgICAgIHByb3Q6IDEuMixcbiAgICAgICAgICAgIGdyYXNhczogMC4yLFxuICAgICAgICAgICAgY2FyYnM6IDYuMSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0Jyb3RlcyBkZSBzb2phJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNTAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDaGlsZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDaWxhbnRybycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEvMiBhdGFkbycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQZXBpbm8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIHUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTGltYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDZWJvbGxhIG1vcmFkYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNb3Jyb24gcm9qbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ1JlY2V0YSBkZSBFbnNhbGFkYSBkZSBQYXN0YSB5IEF0w7puJyxcbiAgICAgICAgdGllbXBvOiAnMjBtaW4nLFxuICAgICAgICBjb3N0bzogMTgwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL2Vuc2FsYWRhUGFzdGEuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDIzMCxcbiAgICAgICAgICAgIHByb3Q6IDguMSxcbiAgICAgICAgICAgIGdyYXNhczogMi40LFxuICAgICAgICAgICAgY2FyYnM6IDM4LjYsXG4gICAgICAgIH0sXG4gICAgICAgIGluZ3JlZGllbnRlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdSaWdhdG9uaScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1RvbWF0ZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBbGJhaGFjYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgYXRhZG8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQXTDum4gbmF0dXJhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ01vcnLDs24gcm9qbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdUb21hdGVzIHNlY29zIGhpZHJhdGFkb3MnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc2IHUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQWNlaXRlIGRlIE9saXZhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMzAgbWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdQb2xsbyBhbCBDdXJyeScsXG4gICAgICAgIHRpZW1wbzogJzIwIG1pbicsXG4gICAgICAgIGNvc3RvOiAxNjAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvcG9sbG9DdXJyeS5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMTQxLFxuICAgICAgICAgICAgcHJvdDogNi4yLFxuICAgICAgICAgICAgZ3Jhc2FzOiAyLjQsXG4gICAgICAgICAgICBjYXJiczogMTEuMyxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BlY2h1Z2EgZGUgcG9sbG8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIHUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnVG9tYXRlIHRyaXR1cmFkbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NpbGFudHJvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMS8yIGF0YWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NlYm9sbGEgZGUgdmVyZGVvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQ3VycnknLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIGNkYScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdMZWNoZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMCBtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBcnJveicsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuXTtcbmV4cG9ydCB2YXIgZGVzYXl1bm9zID0gW1xuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnQ3J1bWJsZSBkZSBNYW56YW5hJyxcbiAgICAgICAgdGllbXBvOiAnMTBtaW4nLFxuICAgICAgICBjb3N0bzogNzAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvY3J1bWJsZU1hbnphbmEuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDE4OSxcbiAgICAgICAgICAgIHByb3Q6IDIuMixcbiAgICAgICAgICAgIGdyYXNhczogMS41LFxuICAgICAgICAgICAgY2FyYnM6IDQyLjEsXG4gICAgICAgIH0sXG4gICAgICAgIGluZ3JlZGllbnRlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNYW56YW5hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMiB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0F6dWNhciBpbnRlZ3JhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQXZlbmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1MCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1Bhc2FzIGRlIHV2YXMnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICczMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0VzZW5jaWEgZGUgdmFpbmlsbGEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1IG1sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NhbmVsYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgY2RhJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ2hhcmluYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdTYW5kd2ljaCBkZSBUb2Z1JyxcbiAgICAgICAgdGllbXBvOiAnNW1pbicsXG4gICAgICAgIGNvc3RvOiAxMDAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvc2FuZHdpY2hUb2Z1LnBuZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAxMzUsXG4gICAgICAgICAgICBwcm90OiA1LjEsXG4gICAgICAgICAgICBncmFzYXM6IDIuMSxcbiAgICAgICAgICAgIGNhcmJzOiAzNi4yLFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUGFuIExhY3RhbCBpbnRlZ3JhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdUb2Z1JyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUsO6Y3VsYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdTZW1pbGxhcyBkZSBjYWxhYmF6YScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUXVlc28gY3JlbWEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NlbWlsbGEgZGUgemFwYWxsbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2FsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMiBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnWW9ndXIgZGUgbWFjZWRvbmlhIGRlIGNpdHJpY29zJyxcbiAgICAgICAgdGllbXBvOiAnMTBtaW4nLFxuICAgICAgICBjb3N0bzogMTMwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL3lvZ3VyQ2l0cmljby5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogODAsXG4gICAgICAgICAgICBwcm90OiAwLjQsXG4gICAgICAgICAgICBncmFzYXM6IDIuMyxcbiAgICAgICAgICAgIGNhcmJzOiAxNS44LFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnWW9ndXIgbmF0dXJhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzI1MCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BvbWVsbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNYW5kYXJpbmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIHUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTmFyYW5qYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdtaWVsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSBjZGEnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2VtaWxsYSBkZSB6YXBhbGxvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMyB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnVG9zdGFkYSBjb24gcGFsdGEgeSBodWV2bycsXG4gICAgICAgIHRpZW1wbzogJzVtaW4nLFxuICAgICAgICBjb3N0bzogODAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvcGFuUGFsdGEuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDEzNixcbiAgICAgICAgICAgIHByb3Q6IDQuNSxcbiAgICAgICAgICAgIGdyYXNhczogNS40LFxuICAgICAgICAgICAgY2FyYnM6IDI2LjEsXG4gICAgICAgIH0sXG4gICAgICAgIGluZ3JlZGllbnRlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQYW4gTGFjdGFsIGludGVncmFsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMiB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BhbHRhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0hldXZvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQaW1pZW50YScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ1BhbnF1ZXF1ZSBkZSBCYW5hbmEnLFxuICAgICAgICB0aWVtcG86ICcxMG1pbicsXG4gICAgICAgIGNvc3RvOiA4MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy90b3J0aWxsYUJhbmFuYS5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMTIwLFxuICAgICAgICAgICAgcHJvdDogNC44LFxuICAgICAgICAgICAgZ3Jhc2FzOiAxLjIsXG4gICAgICAgICAgICBjYXJiczogMjMuOCxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0JhbmFuYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdodWV2bycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBcmFuZGFub3MnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxMCB1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0FjZWl0ZSBkZSBvbGl2YScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgY2RhJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ0NyZXAgZGUgamFtb24geSBxdWVzbycsXG4gICAgICAgIHRpZW1wbzogJzEwbWluJyxcbiAgICAgICAgY29zdG86IDE1MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9jcmVwSllRLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAxODksXG4gICAgICAgICAgICBwcm90OiA2LjIsXG4gICAgICAgICAgICBncmFzYXM6IDUuOCxcbiAgICAgICAgICAgIGNhcmJzOiA0Mi4xLFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSHVldm8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIHUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSGFyaW5hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdMZWNoZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwMCBtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdKYW1vbicsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTW96YXJlbGEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc0MCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ01hbnRlY2EnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1IGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2FsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMiBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnSHVtbXVzIGNvbiB6YW5haG9yaWEnLFxuICAgICAgICB0aWVtcG86ICcxMG1pbicsXG4gICAgICAgIGNvc3RvOiA2MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9odW1tdXMuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDEyMCxcbiAgICAgICAgICAgIHByb3Q6IDkuMixcbiAgICAgICAgICAgIGdyYXNhczogNS4xLFxuICAgICAgICAgICAgY2FyYnM6IDYuOCxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0dhcmJhbnpvcycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1RhaGluaScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgY2RhJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0FjZWl0ZSBkZSBvbGl2YScsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgY2RhJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0FqbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdaYW5haG9yaWEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIHUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2FsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMiBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnR2FsbGV0aXRhcyBkZSBCYW5hbmEnLFxuICAgICAgICB0aWVtcG86ICcyMG1pbicsXG4gICAgICAgIGNvc3RvOiAxOTAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvZ2FsbGV0YUJhbmFuYS5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMjMwLFxuICAgICAgICAgICAgcHJvdDogNy44LFxuICAgICAgICAgICAgZ3Jhc2FzOiA1LjgsXG4gICAgICAgICAgICBjYXJiczogMjkuNCxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0JhbmFuYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBdmVuYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzUwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSGFyaW5hIGRlIGFsbWVuZHJhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNTAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNaWVsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNTAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdTYWwnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICczIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG5dO1xuZXhwb3J0IHZhciBkZWZhdWx0Q29taWRhcyA9IFtcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ1Rvc3RhZGEgY29uIHBhbHRhIHkgaHVldm8nLFxuICAgICAgICB0aWVtcG86ICc1bWluJyxcbiAgICAgICAgY29zdG86IDgwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL3BhblBhbHRhLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAxMzYsXG4gICAgICAgICAgICBwcm90OiA0LjUsXG4gICAgICAgICAgICBncmFzYXM6IDUuNCxcbiAgICAgICAgICAgIGNhcmJzOiAyNi4xLFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUGFuIExhY3RhbCBpbnRlZ3JhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQYWx0YScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdIZXV2bycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdTYWwnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUGltaWVudGEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdQb2xsbyBhbCBsaW3Ds24gY29uIHZlcmR1cmFzJyxcbiAgICAgICAgdGllbXBvOiAnMTVtaW4nLFxuICAgICAgICBjb3N0bzogMTUwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL3BvbGxvQWxMaW1vbi5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMjQyLFxuICAgICAgICAgICAgcHJvdDogNy44LFxuICAgICAgICAgICAgZ3Jhc2FzOiA2LjUsXG4gICAgICAgICAgICBjYXJiczogMzYuNixcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BvbGxvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSBraWxvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0h1ZXZvcycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgdScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdMZWNoZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwMCBtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdIYXJpbmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxNTAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQYW4gcmFsbGFkbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzUgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDcmVtYSBiYWphcyBjYWxvcsOtYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwMCBtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ0NyZXAgZGUgamFtb24geSBxdWVzbycsXG4gICAgICAgIHRpZW1wbzogJzEwbWluJyxcbiAgICAgICAgY29zdG86IDE1MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9jcmVwSllRLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAxODksXG4gICAgICAgICAgICBwcm90OiA2LjIsXG4gICAgICAgICAgICBncmFzYXM6IDUuOCxcbiAgICAgICAgICAgIGNhcmJzOiA0Mi4xLFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSHVldm8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIHUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSGFyaW5hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdMZWNoZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwMCBtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdKYW1vbicsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTW96YXJlbGEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc0MCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ01hbnRlY2EnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1IGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2FsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMiBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnQmVyZW5qZW5hcyBQYXJtZXNhbmFzJyxcbiAgICAgICAgdGllbXBvOiAnMzBtaW4nLFxuICAgICAgICBjb3N0bzogMjEwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL2JlcmVuamVuYXNQYXJtZS5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMjgwLFxuICAgICAgICAgICAgcHJvdDogNS44LFxuICAgICAgICAgICAgZ3Jhc2FzOiAzLjMsXG4gICAgICAgICAgICBjYXJiczogMzYuNSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ2JlcmVuamVuYXMnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxIEtpbG8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSGFyaW5hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUXVlc28gcGFybWVzYW5vJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMjUwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSGFyaW5hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTUwIGcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnVG9tYXRlIHRyaXR1cmFkbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzUwMCBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0FsYmFoYWNhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSBhdGFkbycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNb3phcmVsbGEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1MDAgZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbl07XG4iLCJ2YXIgc2V0U3RvcmFnZSA9IGZ1bmN0aW9uIChwbGFuaW9TdG9yZSkge1xuICAgIHZhciBkYXRhID0gSlNPTi5zdHJpbmdpZnkocGxhbmlvU3RvcmUpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwbGFuaW8nLCBkYXRhKTtcbn07XG52YXIgZ2V0U3RvcmFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwbGFuaW8nKTtcbiAgICB2YXIgcGxhbmlvU3RvcmUgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgIHJldHVybiBwbGFuaW9TdG9yZTtcbn07XG52YXIgcmVtb3ZlU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3BsYW5pbycpO1xufTtcbmV4cG9ydCB7IHNldFN0b3JhZ2UsIGdldFN0b3JhZ2UsIHJlbW92ZVN0b3JlIH07XG4iLCJpbXBvcnQgeyByZWNldGFzIH0gZnJvbSAnLi9kYic7XG5pbXBvcnQgeyBnZXRTdG9yYWdlIH0gZnJvbSAnLi9zdG9yZSc7XG5pbXBvcnQgeyB2b2x2ZXIgfSBmcm9tICcuL3V0aWwnO1xudmFyIHJlY2V0YSA9IGdldFN0b3JhZ2UoKS5yZWNldGEgfHwgcmVjZXRhc1swXTtcbmZ1bmN0aW9uIHNldFJlY2V0YShyZWNldGEpIHtcbiAgICB2YXIgbWFpbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWNldGEnKTtcbiAgICB2YXIgcG9yY2lvbmVzID0gMTtcbiAgICBmdW5jdGlvbiBzZXRJbmdyZWRpZW50ZXMoKSB7XG4gICAgICAgIHJlY2V0YS5pbmdyZWRpZW50ZXMubWFwKGZ1bmN0aW9uIChpbmdyZWRpZW50ZSkge1xuICAgICAgICAgICAgdmFyIHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VsLWluZ3JlZGllbnRlcycpO1xuICAgICAgICAgICAgdmFyIGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5hZGQoJ2QtZmxleCcsICdqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbicsICdteC0xJywgJ215LTEnKTtcbiAgICAgICAgICAgIGxpLmlubmVySFRNTCA9IFwiICA8c3Bhbj5cIiArIGluZ3JlZGllbnRlLml0ZW0gKyBcIjwvc3Bhbj48c3Bhbj5cIiArIGluZ3JlZGllbnRlLmNhbnQgKyBcIjwvc3Bhbj5cIjtcbiAgICAgICAgICAgIHVsLmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFBhc29zKCkge1xuICAgICAgICByZWNldGEucGFzb3MubWFwKGZ1bmN0aW9uIChwYXNvLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIG9sID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29sLXBhc29zJyk7XG4gICAgICAgICAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICAgICAgbGkuaW5uZXJIVE1MID0gXCI8cCBjbGFzcz1cXFwidGV4dC1saWdodFxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PHNwYW4gY2xhc3M9XFxcImg1XFxcIj5QYXNvIFwiICsgKGluZGV4ICsgMSkgKyBcIjwvc3Bhbj5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8YnIgLz5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcIiArIHBhc28gKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XCI7XG4gICAgICAgICAgICBvbC5hcHBlbmRDaGlsZChsaSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYWluLmlubmVySFRNTCA9IFwiPGRpdiBjbGFzcz1cXFwicmVjZXRhLXZpZGVvXFxcIiAgc3R5bGU9XFxcIiBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXFxuXFx0XFx0XFx0cmdiYSgwLCAwLCAwLCAwLjMpLFxcblxcdFxcdFxcdHJnYmEoMCwgMCwgMCwgMC4zKSxcXG5cXHRcXHRcXHRyZ2JhKDAsIDAsIDAsIDAuMyksXFxuXFx0XFx0XFx0cmdiYSgwLCAwLCAwLCAwLjMpXFxuXFx0XFx0KSxcXG5cXHRcXHR1cmwoXCIgKyByZWNldGEuaW1nICsgXCIpOyBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyXFxcIj5cXG5cXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJ3MTAwIGgxNVxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0PGJ1dHRvbiBjbGFzcz1cXFwiYnRuLWljb24gd2hpdGVcXFwiIGlkPVxcXCJ2b2x2ZXJcXFwiID5cXG5cXHRcXHRcXHRcXHRcXHRcXHQ8aSBjbGFzcz1cXFwiZmFzIGZhLWFycm93LWxlZnRcXFwiPjwvaT5cXG5cXHRcXHRcXHRcXHRcXHQ8L2J1dHRvbj5cXG5cXHRcXHRcXHRcXHQ8L2Rpdj5cXG5cXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJ3MTAwIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGgxNVxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0PGJ1dHRvbiBjbGFzcz1cXFwiYnRuLWljb24gd2hpdGVcXFwiPlxcblxcdFxcdFxcdFxcdFxcdFxcdDxpIGNsYXNzPVxcXCJmYXIgZmEtcGxheS1jaXJjbGUgZmEtNnhcXFwiPjwvaT5cXG5cXHRcXHRcXHRcXHRcXHQ8L2J1dHRvbj5cXG5cXHRcXHRcXHRcXHQ8L2Rpdj5cXG5cXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJ3MTAwIGgyMFxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0PGgxIGNsYXNzPVxcXCJ3aGl0ZSBtbC0yIGgxXFxcIj5cIiArIHJlY2V0YS50aXR1bG8gKyBcIjwvaDE+XFxuXFx0XFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XFx0PGRpdiBpZD1cXFwidGFic1xcXCIgY2xhc3M9XFxcInRhYnNcXFwiPlxcblxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcImV4cGFuZC1jb250YWluZXJcXFwiPlxcblxcdFxcdFxcdFxcdFxcdDxidXR0b24gY2xhc3M9XFxcImV4cGFuZFxcXCIgaWQ9XFxcInRvZ2dsZVxcXCI+PC9idXR0b24+XFxuXFx0XFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwidGFiLWNvbnRhaW5lclxcXCIgcm9sZT1cXFwidGFibGlzdFxcXCIgPlxcblxcdFxcdFxcdFxcdFxcdDxidXR0b24gY2xhc3M9XFxcInRhYi1idXR0b24gYmxhY2tcXFwiIHJvbGU9XFxcInRhYlxcXCIgaWQ9XFxcInRiMVxcXCIgYXJpYS1zZWxlY3RlZD1cXFwidHJ1ZVxcXCI+SW5ncmVkaWVudGVzPC9idXR0b24+XFxuXFx0XFx0XFx0XFx0XFx0PGJ1dHRvbiBjbGFzcz1cXFwidGFiLWJ1dHRvblxcXCIgcm9sZT1cXFwidGFiXFxcIiBpZD1cXFwidGIyXFxcIiBhcmlhLXNlbGVjdGVkPVxcXCJmYWxzZVxcXCIgID5SZWNldGE8L2J1dHRvbj5cXG5cXHRcXHRcXHRcXHQ8L2Rpdj5cXG5cXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJicmFuZCB3MTAwIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3BhY2VFdmVubHkgbXQtMVxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0PHNlbGVjdCBhcmlhLWxhYmVsPVxcXCJwb3JjaW9uZXNcXFwiIGlkPVxcXCJwb3JjaW9uZXNcXFwiIGNsYXNzPVxcXCJzZWxlY3RcXFwiPlxcblxcdFxcdFxcdFxcdFxcdFxcdDxvcHRpb24gdmFsdWU9XFxcIjFcXFwiPjEgcG9yY2lcXHUwMEYzbjwvb3B0aW9uPlxcblxcdFxcdFxcdFxcdFxcdFxcdDxvcHRpb24gdmFsdWU9XFxcIjJcXFwiPjIgcG9yY2lvbmVzPC9vcHRpb24+XFxuXFx0XFx0XFx0XFx0XFx0XFx0PG9wdGlvbiB2YWx1ZT1cXFwiM1xcXCI+MyBwb3JjaW9uZXM8L29wdGlvbj5cXG5cXHRcXHRcXHRcXHRcXHRcXHQ8b3B0aW9uIHZhbHVlPVxcXCI0XFxcIj40IHBvcmNpb25lczwvb3B0aW9uPlxcblxcdFxcdFxcdFxcdFxcdDwvc2VsZWN0PlxcblxcdFxcdFxcdFxcdFxcdDxzcGFuIGNsYXNzPVxcXCJicmFuZCBtci0wNVxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0PGkgY2xhc3M9XFxcImZhciBmYS1jbG9jayBmYS1zbVxcXCI+PC9pPiBcIiArIHJlY2V0YS50aWVtcG8gKyBcIlxcblxcdFxcdFxcdFxcdFxcdDwvc3Bhbj5cXG5cXHRcXHRcXHRcXHRcXHQ8c3BhbiBjbGFzcz1cXFwibWwtMDVcXFwiPlxcblxcdFxcdFxcdFxcdFxcdFxcdDxpIGNsYXNzPVxcXCJmYXMgZmEtZG9sbGFyLXNpZ24gZmEtc21cXFwiPjwvaT4gXCIgKyByZWNldGEuY29zdG8gKyBcIlxcblxcdFxcdFxcdFxcdFxcdDwvc3Bhbj5cXG5cXHRcXHRcXHRcXHQ8L2Rpdj5cXG5cXG5cXHRcXHRcXHRcXHQ8ZGl2XFxuXFx0XFx0XFx0XFx0XFx0aWQ9XFxcImluZ3JlZGllbnRlc1xcXCJcXG5cXHRcXHRcXHRcXHRcXHRyb2xlPVxcXCJ0YWJwYW5lbFxcXCJcXG5cXHRcXHRcXHRcXHRcXHRjbGFzcz1cXFwidGFiLWNvbnRlbnQgdzEwMFxcXCJcXG5cXHRcXHRcXHRcXHRcXHRhcmlhLWxhYmVsbGVkYnk9XFxcInRiMVxcXCJcXG5cXHRcXHRcXHRcXHRcXHR0YWJpbmRleD1cXFwiMFxcXCJcXG5cXG5cXHRcXHRcXHRcXHQ+XFxuXFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwiZC1mbGV4IGp1c3RpZnktY29udGVudC1zcGFjZUV2ZW5seSBtdC0xIHcxMDBcXFwiPlxcblxcdFxcdFxcdFxcdFxcdFxcdDxkaXZcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRjbGFzcz1cXFwiZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktY29udGVudC1jZW50ZXIgdGV4dC1jZW50ZXIgc21hbGxcXFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0PlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdDxzcGFuPkNhbG9yXFx1MDBFRGFzPC9zcGFuPjxzcGFuIGlkPVxcXCJrY2FsXFxcIj5cIiArIHJlY2V0YS5kYXRvcy5rY2FsICogcG9yY2lvbmVzICsgXCI8L3NwYW4+PHNwYW4+a2NhbCA8L3NwYW4+XFxuXFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwic2VwYXJhZG9yLWRhdG9zXFxcIj48L2Rpdj5cXG5cXHRcXHRcXHRcXHRcXHRcXHQ8ZGl2XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0Y2xhc3M9XFxcImQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIHRleHQtY2VudGVyIHNtYWxsXFxcIlxcblxcdFxcdFxcdFxcdFxcdFxcdD5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHQ8c3Bhbj5Qcm90ZWluYXM8L3NwYW4+PHNwYW4gaWQ9XFxcInByb3RcXFwiPlwiICsgcmVjZXRhLmRhdG9zLnByb3QgKiBwb3JjaW9uZXMgKyBcIjwvc3Bhbj48c3Bhbj5HcmFtb3MgPC9zcGFuPlxcblxcdFxcdFxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcInNlcGFyYWRvci1kYXRvc1xcXCI+PC9kaXY+XFxuXFx0XFx0XFx0XFx0XFx0XFx0PGRpdlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdGNsYXNzPVxcXCJkLWZsZXggZmxleC1jb2x1bW4ganVzdGlmeS1jb250ZW50LWNlbnRlciB0ZXh0LWNlbnRlciBzbWFsbFxcXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHQ+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0PHNwYW4+R3Jhc2FzPC9zcGFuPjxzcGFuIGlkPVxcXCJncmFzYXNcXFwiPlwiICsgcmVjZXRhLmRhdG9zLmdyYXNhcyAqIHBvcmNpb25lcyArIFwiPC9zcGFuPjxzcGFuPkdyYW1vcyA8L3NwYW4+XFxuXFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwic2VwYXJhZG9yLWRhdG9zXFxcIj48L2Rpdj5cXG5cXHRcXHRcXHRcXHRcXHRcXHQ8ZGl2XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0Y2xhc3M9XFxcImQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIHRleHQtY2VudGVyIHNtYWxsXFxcIlxcblxcdFxcdFxcdFxcdFxcdFxcdD5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHQ8c3BhbiBhcmlhLWxhYmVsPVxcXCJDYXJib2hpZHJhdG9zXFxcIj5DYXJicy48L3NwYW4+PHNwYW4gaWQ9XFxcImNhcmJzXFxcIj5cIiArIHJlY2V0YS5kYXRvcy5jYXJicyAqIHBvcmNpb25lcyArIFwiPC9zcGFuXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0PjxzcGFuPkdyYW1vcyA8L3NwYW4+XFxuXFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcInc4MCB0ZXh0LWxpZ2h0XFxcIiBpZD1cXFwidWwtaW5ncmVkaWVudGVzXFxcIj5cXG5cXG5cXHRcXHRcXHRcXHRcXHQ8L3VsPlxcblxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdFxcdDxkaXYgaWQ9XFxcInBhc29zXFxcIiBjbGFzcz1cXFwidGFiLWNvbnRlbnQgdzEwMCBkaXNwbGF5LW5vbmVcXFwiIHJvbGU9XFxcInRhYnBhbmVsXFxcIiBhcmlhLWxhYmVsbGVkYnk9XFxcInRiMVxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPVxcXCJ3ODBcXFwiIGlkPVxcXCJvbC1wYXNvc1xcXCI+XFxuXFx0XFx0XFx0XFx0XFx0PC9vbD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPC9kaXY+XCI7XG4gICAgdmFyIHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3JjaW9uZXMnKTtcbiAgICB2YXIgYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZ2dsZScpO1xuICAgIHZhciB0YWJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYnMnKTtcbiAgICB2YXIgaW5ncmVkaWVudGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZ3JlZGllbnRlcycpO1xuICAgIHZhciBwYXNvcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXNvcycpO1xuICAgIHZhciB0YWJMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW3JvbGU9XCJ0YWJsaXN0XCJdJyk7XG4gICAgc2V0SW5ncmVkaWVudGVzKCk7XG4gICAgc2V0UGFzb3MoKTtcbiAgICB2YXIgdG91Y2hTdGFyWSA9IDA7XG4gICAgdmFyIHRiSW5ncmVkaWVudGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RiMScpO1xuICAgIHZhciB0YlBhc29zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RiMicpO1xuICAgIHRiSW5ncmVkaWVudGVzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGFiSW5ncmVkaWVudGVzKTtcbiAgICB0YlBhc29zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGFiUGFzb3MpO1xuICAgIGZ1bmN0aW9uIHRhYkluZ3JlZGllbnRlcygpIHtcbiAgICAgICAgdmFyIGlzRXhwYW5kZWQgPSB0YWJzLmNsYXNzTGlzdC5jb250YWlucygnZXhwYW5kZWQnKTtcbiAgICAgICAgaWYgKCFpc0V4cGFuZGVkKSB7XG4gICAgICAgICAgICB0YWJzLmNsYXNzTGlzdC5hZGQoJ2V4cGFuZGVkJyk7XG4gICAgICAgICAgICB0YWJzLmNsYXNzTGlzdC5yZW1vdmUoJ2NvbnRyYWVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGJJbmdyZWRpZW50ZXMuY2xhc3NMaXN0LmFkZCgnYmxhY2snKTtcbiAgICAgICAgdGJQYXNvcy5jbGFzc0xpc3QucmVtb3ZlKCdibGFjaycpO1xuICAgICAgICBpbmdyZWRpZW50ZXMuY2xhc3NMaXN0LnJlbW92ZSgnZGlzcGxheS1ub25lJyk7XG4gICAgICAgIHBhc29zLmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXktbm9uZScpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0YWJQYXNvcygpIHtcbiAgICAgICAgdmFyIGlzRXhwYW5kZWQgPSB0YWJzLmNsYXNzTGlzdC5jb250YWlucygnZXhwYW5kZWQnKTtcbiAgICAgICAgaWYgKCFpc0V4cGFuZGVkKSB7XG4gICAgICAgICAgICB0YWJzLmNsYXNzTGlzdC5hZGQoJ2V4cGFuZGVkJyk7XG4gICAgICAgICAgICB0YWJzLmNsYXNzTGlzdC5yZW1vdmUoJ2NvbnRyYWVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGJJbmdyZWRpZW50ZXMuY2xhc3NMaXN0LnJlbW92ZSgnYmxhY2snKTtcbiAgICAgICAgdGJQYXNvcy5jbGFzc0xpc3QuYWRkKCdibGFjaycpO1xuICAgICAgICBpbmdyZWRpZW50ZXMuY2xhc3NMaXN0LmFkZCgnZGlzcGxheS1ub25lJyk7XG4gICAgICAgIHBhc29zLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc3BsYXktbm9uZScpO1xuICAgIH1cbiAgICB2YXIgc2V0UG9yY2lvbmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBwb3JjaW9uZXMgPSBwYXJzZUludChzZWxlY3QudmFsdWUpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna2NhbCcpLmlubmVySFRNTCA9IChyZWNldGEuZGF0b3Mua2NhbCAqIHBvcmNpb25lcylcbiAgICAgICAgICAgIC50b0ZpeGVkKDApXG4gICAgICAgICAgICAudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dyYXNhcycpLmlubmVySFRNTCA9IChyZWNldGEuZGF0b3MuZ3Jhc2FzICogcG9yY2lvbmVzKVxuICAgICAgICAgICAgLnRvRml4ZWQoMSlcbiAgICAgICAgICAgIC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvdCcpLmlubmVySFRNTCA9IChyZWNldGEuZGF0b3MucHJvdCAqIHBvcmNpb25lcylcbiAgICAgICAgICAgIC50b0ZpeGVkKDEpXG4gICAgICAgICAgICAudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhcmJzJykuaW5uZXJIVE1MID0gKHJlY2V0YS5kYXRvcy5jYXJicyAqIHBvcmNpb25lcylcbiAgICAgICAgICAgIC50b0ZpeGVkKDEpXG4gICAgICAgICAgICAudG9TdHJpbmcoKTtcbiAgICB9O1xuICAgIHNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzZXRQb3JjaW9uZXMpO1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlVGFicyk7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBzZXRUb3VjaFN0YXJ0KTtcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0b3VjaEVuZCk7XG4gICAgZnVuY3Rpb24gc3dpcGVUYWJzKCkge1xuICAgICAgICB2YXIgaXNFeHBhbmRlZCA9IHRhYnMuY2xhc3NMaXN0LmNvbnRhaW5zKCdleHBhbmRlZCcpO1xuICAgICAgICBpZiAoaXNFeHBhbmRlZCkge1xuICAgICAgICAgICAgdGFicy5jbGFzc0xpc3QuYWRkKCdjb250cmFlcicpO1xuICAgICAgICAgICAgdGFicy5jbGFzc0xpc3QucmVtb3ZlKCdleHBhbmRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFicy5jbGFzc0xpc3QuYWRkKCdleHBhbmRlZCcpO1xuICAgICAgICAgICAgdGFicy5jbGFzc0xpc3QucmVtb3ZlKCdjb250cmFlcicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFRvdWNoU3RhcnQoZSkge1xuICAgICAgICB0b3VjaFN0YXJZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b3VjaEVuZChlKSB7XG4gICAgICAgIHZhciB0b3VjaEVuZCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRvdWNoU3RhclkgLSB0b3VjaEVuZDtcbiAgICAgICAgaWYgKE1hdGguYWJzKHJlc3VsdCkgPD0gMzApIHtcbiAgICAgICAgICAgIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVzdWx0ID4gMCkge1xuICAgICAgICAgICAgdGFicy5jbGFzc0xpc3QuYWRkKCdleHBhbmRlZCcpO1xuICAgICAgICAgICAgdGFicy5jbGFzc0xpc3QucmVtb3ZlKCdjb250cmFlcicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFicy5jbGFzc0xpc3QuYWRkKCdjb250cmFlcicpO1xuICAgICAgICAgICAgdGFicy5jbGFzc0xpc3QucmVtb3ZlKCdleHBhbmRlZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRhYkxpc3QuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGFycm93c01vdmUpO1xuICAgIGZ1bmN0aW9uIGFycm93c01vdmUoZSkge1xuICAgICAgICB2YXIgYnV0dG9uID0gZS50YXJnZXQ7XG4gICAgICAgIGlmICgoZS5rZXkgPT09ICdBcnJvd1JpZ2h0JyB8fCBlLmtleSA9PT0gJ0Fycm93TGVmdCcpICYmXG4gICAgICAgICAgICBidXR0b24uaWQgPT09ICd0YjEnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYXJyb3cgZGVyZWNoYScpO1xuICAgICAgICAgICAgdGJQYXNvcy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChlLmtleSA9PT0gJ0Fycm93UmlnaHQnIHx8IGUua2V5ID09PSAnQXJyb3dMZWZ0JykgJiZcbiAgICAgICAgICAgIGJ1dHRvbi5pZCA9PT0gJ3RiMicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhcnJvdyBpenEnKTtcbiAgICAgICAgICAgIHRiSW5ncmVkaWVudGVzLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5zZXRSZWNldGEocmVjZXRhKTtcbnZhciByZWVtcGxhemFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlZW1wbGF6YXInKTtcbmZ1bmN0aW9uIHJlZW1wbGF6YXJSZWNldGEoKSB7XG4gICAgbG9jYXRpb24uaHJlZiA9IFwiaHR0cDovL1wiICsgbG9jYXRpb24uaG9zdCArIFwiL3JlZW1wbGF6by5odG1sXCI7XG59XG5yZWVtcGxhemFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVlbXBsYXphclJlY2V0YSk7XG52YXIgYnV0dG9uVm9sdmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZvbHZlcicpO1xuYnV0dG9uVm9sdmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdm9sdmVyKTtcbiIsImV4cG9ydCB2YXIgdm9sdmVyID0gZnVuY3Rpb24gKCkge1xuICAgIGhpc3RvcnkuYmFjaygpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=