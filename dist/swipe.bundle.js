(()=>{"use strict";var x=[{url:"assets/img/chili.png",fondo:" rgb(255,173, 154)",titulo:"Chili",descripcion:"Pimenton, ajos o morrones de diversos tipos. Son utilizados en diversas recetas."},{url:"assets/img/ostras.png",fondo:"rgb(174, 254, 209)",titulo:"Ostras",descripcion:"Poseen un gran valor nutricional y son utilizadas mayormente como acompa√±amiento"},{url:"assets/img/huevos.png",fondo:"rgb(190, 182, 140)",titulo:"huevos",descripcion:"xxxx xxxxx xxxxx xxxxxxx xxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxxx xxxxxxxxxxxxx xxx"},{url:"assets/img/brocoli.png",fondo:"rgb(174, 254, 209)",titulo:"Brocoli",descripcion:"xxxx xxxxx xxxxx xxxxxxx xxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxxx xxxxxxxxxxxxx xxx"}],t=document.getElementById("swipe");!function e(){var i=0;t.innerHTML="",0===x.length&&(location.href="http://"+location.host+"/perfil4.html"),x.map((function(e,i){var n=document.createElement("div");n.id=""+i,x.length,n.innerHTML='<div id="'+i+'3" > <div class="img-container"> <div class="img" style="background-image: url('+e.url+');"></div> <div class="fondo-img" style="background: '+e.fondo+'"> </div>  </div>  <h3 class="ml-05 my-1">'+e.titulo+'</h3> <p class="ml-05 text-light my-1">'+e.descripcion+"</p> </div>",n.classList.add("swipe-item");var o=10*(i+1),s=-10*i+"px";n.style.setProperty("z-index",o.toString()),n.style.setProperty("top",s),t.appendChild(n),i!==x.length-1&&(n.style.setProperty("transform","scale("+function(t){return 1-.01*(x.length-t)}(i)+")"),document.getElementById(i+"3").setAttribute("aria-hidden","true"))}));var n=document.getElementById(""+(x.length-1));n.addEventListener("touchstart",(function(x){i=x.changedTouches[0].clientX})),n.addEventListener("touchend",(function(t){var o=t.changedTouches[0].clientX,s=o-i;console.log(o,s,i),Math.abs(s)<=60||(i>=o?(n.classList.add("salirIzq"),x.splice(-1,1),setTimeout((function(){e()}),1e3)):(n.classList.add("salirDer"),x.splice(-1,1),setTimeout((function(){e()}),1e3)))}))}(),document.getElementById("continuar").addEventListener("click",(function(){location.href="http://"+location.host+"/perfil4.html"}),!0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,