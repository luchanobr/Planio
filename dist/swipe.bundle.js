(()=>{"use strict";var e=[{url:"assets/img/chili.png",fondo:" rgb(255,173, 154)",titulo:"Chili",descripcion:"Pimenton, ajos o morrones de diversos tipos. Son utilizados en diversas recetas."},{url:"assets/img/ostras.png",fondo:"rgb(174, 254, 209)",titulo:"Ostras",descripcion:"Poseen un gran valor nutricional y son utilizadas mayormente como acompañamiento."},{url:"assets/img/huevos.png",fondo:"rgb(190, 182, 140)",titulo:"huevos",descripcion:"Es un alimento muy práctico y altamente nutritivo que debe formar parte de la dieta habitual."},{url:"assets/img/brocoli.png",fondo:"rgb(174, 254, 209)",titulo:"Brocoli",descripcion:"Rico en proteínas, hierro, calcio, vitaminas y minerales, un producto esencial para aquellos que buscan un alimento saludable."}],t=document.getElementById("swipe");function n(){var i=0;t.innerHTML="",0===e.length&&(location.href="http://"+location.host+"/perfil4.html"),e.map((function(n,i){var o=document.createElement("div");o.id=""+i,e.length,o.innerHTML='<div id="'+i+'3"> <div class="img-container"> <div class="img" style="background-image: url('+n.url+');"  alt="'+n.titulo+'"></div> <div class="fondo-img" style="background: '+n.fondo+'"> </div>  </div> <div tabindex="0" id="'+n.titulo+'"> <p class="sr-only"> Preferncias '+e.length+' de 4 <P> <h3 class="ml-05 my-1" >'+n.titulo+'</h3> <p class="ml-05 text-light my-1">'+n.descripcion+"</p> </div> </div>",o.classList.add("swipe-item");var s=10*(i+1),a=-10*i+"px";o.style.setProperty("z-index",s.toString()),o.style.setProperty("top",a),t.appendChild(o),i!==e.length-1&&(o.style.setProperty("transform","scale("+function(t){return 1-.01*(e.length-t)}(i)+")"),document.getElementById(i+"3").setAttribute("aria-hidden","true"));var l=document.getElementById(n.titulo);4!==e.length&&l.focus()}));var o=document.getElementById(""+(e.length-1));o.addEventListener("touchstart",(function(e){i=e.changedTouches[0].clientX})),o.addEventListener("touchend",(function(t){var s=t.changedTouches[0].clientX,a=s-i;console.log(s,a,i),Math.abs(a)<=60||(i>=s?(o.classList.add("salirIzq"),e.splice(-1,1),setTimeout((function(){n()}),1e3)):(o.classList.add("salirDer"),e.splice(-1,1),setTimeout((function(){n()}),1e3)))}))}n();var i=document.getElementById("aceptar"),o=document.getElementById("rechazar"),s=document.getElementById("continuar");i.addEventListener("click",(function(){document.getElementById(""+(e.length-1)).classList.add("salirDer"),e.splice(-1,1),setTimeout((function(){n()}),1e3)})),o.addEventListener("click",(function(){document.getElementById(""+(e.length-1)).classList.add("salirIzq"),e.splice(-1,1),setTimeout((function(){n()}),1e3)})),s.addEventListener("click",(function(){location.href="http://"+location.host+"/perfil4.html"}),!0),document.getElementById("volver").addEventListener("click",(function(){history.back()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wbGFuaW8vLi9zcmMvZGIudHMiLCJ3ZWJwYWNrOi8vcGxhbmlvLy4vc3JjL3N3aXBlLnRzIiwid2VicGFjazovL3BsYW5pby8uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbInByZWZlcmVuY2lhcyIsInVybCIsImZvbmRvIiwidGl0dWxvIiwiZGVzY3JpcGNpb24iLCJzd2lwZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzZXRJbWFnZW5lcyIsImluaXRpYWxYIiwiaW5uZXJIVE1MIiwibGVuZ3RoIiwibG9jYXRpb24iLCJocmVmIiwiaG9zdCIsIm1hcCIsIml0ZW0iLCJpbmRleCIsImNhcmQiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ6IiwibWFyZ2luIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInRvU3RyaW5nIiwiYXBwZW5kQ2hpbGQiLCJzZXRTY2FsZSIsInNldEF0dHJpYnV0ZSIsInRpdHVsb0NhcmQiLCJmb2N1cyIsImltZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiY2hhbmdlZFRvdWNoZXMiLCJjbGllbnRYIiwiZmluYWxYIiwicmVzdWx0IiwiY29uc29sZSIsImxvZyIsIk1hdGgiLCJhYnMiLCJzcGxpY2UiLCJzZXRUaW1lb3V0IiwiYWNlcHRhciIsInJlY2hhemFyIiwiYnV0dG9uQ29udGludWFyIiwiaGlzdG9yeSIsImJhY2siXSwibWFwcGluZ3MiOiJtQkFBTyxJQUFJQSxFQUFlLENBQ3RCLENBQ0lDLElBQUssdUJBQ0xDLE1BQU8scUJBQ1BDLE9BQVEsUUFDUkMsWUFBYSxvRkFFakIsQ0FDSUgsSUFBSyx3QkFDTEMsTUFBTyxxQkFDUEMsT0FBUSxTQUNSQyxZQUFhLHFGQUVqQixDQUNJSCxJQUFLLHdCQUNMQyxNQUFPLHFCQUNQQyxPQUFRLFNBQ1JDLFlBQWEsaUdBRWpCLENBQ0lILElBQUsseUJBQ0xDLE1BQU8scUJBQ1BDLE9BQVEsVUFDUkMsWUFBYSxtSUNyQmpCQyxFQUFRQyxTQUFTQyxlQUFlLFNBSXBDLFNBQVNDLElBRUwsSUFBSUMsRUFBVyxFQUNmSixFQUFNSyxVQUFZLEdBQ00sSUFBeEJWLEVBQWFXLFNBQ05DLFNBQVNDLEtBQU8sVUFBWUQsU0FBU0UsS0FBTyxpQkFFbkRkLEVBQWFlLEtBQUksU0FBVUMsRUFBTUMsR0FDN0IsSUFBSUMsRUFBT1osU0FBU2EsY0FBYyxPQUNsQ0QsRUFBS0UsR0FBSyxHQUFLSCxFQUNDakIsRUFBYVcsT0FDN0JPLEVBQUtSLFVBQVksWUFBZU8sRUFBUSxpRkFBeUZELEVBQUtmLElBQU0sYUFBaUJlLEVBQUtiLE9BQVMsc0RBQTREYSxFQUFLZCxNQUFRLDJDQUFpRGMsRUFBS2IsT0FBUyxzQ0FBMkNILEVBQWFXLE9BQVMscUNBQXlDSyxFQUFLYixPQUFTLDBDQUE4Q2EsRUFBS1osWUFBYyxxQkFDNWVjLEVBQUtHLFVBQVVDLElBQUksY0FDbkIsSUFBSUMsRUFBa0IsSUFBYk4sRUFBUSxHQUNiTyxHQUFrQixHQUFUUCxFQUFjLEtBQzNCQyxFQUFLTyxNQUFNQyxZQUFZLFVBQVdILEVBQUVJLFlBQ3BDVCxFQUFLTyxNQUFNQyxZQUFZLE1BQU9GLEdBQzlCbkIsRUFBTXVCLFlBQVlWLEdBQ2RELElBQVVqQixFQUFhVyxPQUFTLElBQ2hDTyxFQUFLTyxNQUFNQyxZQUFZLFlBQWEsU0F0QmhELFNBQWtCVCxHQUNkLE9BQU8sRUFBb0MsS0FBL0JqQixFQUFhVyxPQUFTTSxHQXFCcUJZLENBQVNaLEdBQVMsS0FDcERYLFNBQVNDLGVBQWVVLEVBQVEsS0FDdENhLGFBQWEsY0FBZSxTQUV2QyxJQUFJQyxFQUFhekIsU0FBU0MsZUFBZVMsRUFBS2IsUUFDdEIsSUFBeEJILEVBQWFXLFFBQWVvQixFQUFXQyxXQUUzQyxJQUFJQyxFQUFNM0IsU0FBU0MsZUFBZSxJQUFNUCxFQUFhVyxPQUFTLElBQzlEc0IsRUFBSUMsaUJBQWlCLGNBRXJCLFNBQWNDLEdBQ1YxQixFQUFXMEIsRUFBRUMsZUFBZSxHQUFHQyxXQUZuQ0osRUFBSUMsaUJBQWlCLFlBSXJCLFNBQWlCQyxHQUNiLElBQUlHLEVBQVNILEVBQUVDLGVBQWUsR0FBR0MsUUFDN0JFLEVBQVNELEVBQVM3QixFQUN0QitCLFFBQVFDLElBQUlILEVBQVFDLEVBQVE5QixHQUN4QmlDLEtBQUtDLElBQUlKLElBQVcsS0FHZjlCLEdBQVk2QixHQUNqQkwsRUFBSVosVUFBVUMsSUFBSSxZQUNsQnRCLEVBQWE0QyxRQUFRLEVBQUcsR0FDeEJDLFlBQVcsV0FDUHJDLE1BQ0QsT0FHSHlCLEVBQUlaLFVBQVVDLElBQUksWUFDbEJ0QixFQUFhNEMsUUFBUSxFQUFHLEdBQ3hCQyxZQUFXLFdBQ1ByQyxNQUNELFVBSWZBLElBQ0EsSUFBSXNDLEVBQVV4QyxTQUFTQyxlQUFlLFdBQ2xDd0MsRUFBV3pDLFNBQVNDLGVBQWUsWUFDbkN5QyxFQUFrQjFDLFNBQVNDLGVBQWUsYUFDOUN1QyxFQUFRWixpQkFBaUIsU0FFekIsV0FDYzVCLFNBQVNDLGVBQWUsSUFBTVAsRUFBYVcsT0FBUyxJQUMxRFUsVUFBVUMsSUFBSSxZQUNsQnRCLEVBQWE0QyxRQUFRLEVBQUcsR0FDeEJDLFlBQVcsV0FDUHJDLE1BQ0QsUUFQUHVDLEVBQVNiLGlCQUFpQixTQVMxQixXQUNjNUIsU0FBU0MsZUFBZSxJQUFNUCxFQUFhVyxPQUFTLElBQzFEVSxVQUFVQyxJQUFJLFlBQ2xCdEIsRUFBYTRDLFFBQVEsRUFBRyxHQUN4QkMsWUFBVyxXQUNQckMsTUFDRCxRQUtQd0MsRUFBZ0JkLGlCQUFpQixTQUhqQyxXQUNJdEIsU0FBU0MsS0FBTyxVQUFZRCxTQUFTRSxLQUFPLG1CQUVPLEdBQ3BDUixTQUFTQyxlQUFlLFVBQzlCMkIsaUJBQWlCLFNDeEZWLFdBQ2hCZSxRQUFRQyxXIiwiZmlsZSI6InN3aXBlLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgcHJlZmVyZW5jaWFzID0gW1xuICAgIHtcbiAgICAgICAgdXJsOiAnYXNzZXRzL2ltZy9jaGlsaS5wbmcnLFxuICAgICAgICBmb25kbzogJyByZ2IoMjU1LDE3MywgMTU0KScsXG4gICAgICAgIHRpdHVsbzogJ0NoaWxpJyxcbiAgICAgICAgZGVzY3JpcGNpb246ICdQaW1lbnRvbiwgYWpvcyBvIG1vcnJvbmVzIGRlIGRpdmVyc29zIHRpcG9zLiBTb24gdXRpbGl6YWRvcyBlbiBkaXZlcnNhcyByZWNldGFzLicsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHVybDogJ2Fzc2V0cy9pbWcvb3N0cmFzLnBuZycsXG4gICAgICAgIGZvbmRvOiAncmdiKDE3NCwgMjU0LCAyMDkpJyxcbiAgICAgICAgdGl0dWxvOiAnT3N0cmFzJyxcbiAgICAgICAgZGVzY3JpcGNpb246ICdQb3NlZW4gdW4gZ3JhbiB2YWxvciBudXRyaWNpb25hbCB5IHNvbiB1dGlsaXphZGFzIG1heW9ybWVudGUgY29tbyBhY29tcGHDsWFtaWVudG8uJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdXJsOiAnYXNzZXRzL2ltZy9odWV2b3MucG5nJyxcbiAgICAgICAgZm9uZG86ICdyZ2IoMTkwLCAxODIsIDE0MCknLFxuICAgICAgICB0aXR1bG86ICdodWV2b3MnLFxuICAgICAgICBkZXNjcmlwY2lvbjogJ0VzIHVuIGFsaW1lbnRvIG11eSBwcsOhY3RpY28geSBhbHRhbWVudGUgbnV0cml0aXZvIHF1ZSBkZWJlIGZvcm1hciBwYXJ0ZSBkZSBsYSBkaWV0YSBoYWJpdHVhbC4nLFxuICAgIH0sXG4gICAge1xuICAgICAgICB1cmw6ICdhc3NldHMvaW1nL2Jyb2NvbGkucG5nJyxcbiAgICAgICAgZm9uZG86ICdyZ2IoMTc0LCAyNTQsIDIwOSknLFxuICAgICAgICB0aXR1bG86ICdCcm9jb2xpJyxcbiAgICAgICAgZGVzY3JpcGNpb246ICdSaWNvIGVuIHByb3Rlw61uYXMsIGhpZXJybywgY2FsY2lvLCB2aXRhbWluYXMgeSBtaW5lcmFsZXMsIHVuIHByb2R1Y3RvIGVzZW5jaWFsIHBhcmEgYXF1ZWxsb3MgcXVlIGJ1c2NhbiB1biBhbGltZW50byBzYWx1ZGFibGUuJyxcbiAgICB9LFxuXTtcbmV4cG9ydCB2YXIgcmVjZXRhcyA9IFtcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ1BvbGxvIGFsIGxpbcOzbiBjb24gdmVyZHVyYXMnLFxuICAgICAgICB0aWVtcG86ICcxNW1pbicsXG4gICAgICAgIGNvc3RvOiAxNTAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvcG9sbG9BbExpbW9uLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAyNDIsXG4gICAgICAgICAgICBwcm90OiA3LjgsXG4gICAgICAgICAgICBncmFzYXM6IDYuNSxcbiAgICAgICAgICAgIGNhcmJzOiAzNi42LFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUG9sbG8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdraWxvJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAna2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSHVldm9zJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMicsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdMZWNoZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnbWlsaWxpdHJvcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ21sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0hhcmluYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzE1MCBnJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BhbiByYWxsYWRvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMjAwIGcnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2FsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNSBnJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NyZW1hIGJhamFzIGNhbG9yw61hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAwIG1sJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdtaWxpbGl0cm9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnbWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdXb2sgZGUgdmVyZHVyYXMnLFxuICAgICAgICB0aWVtcG86ICcxNW1pbicsXG4gICAgICAgIGNvc3RvOiAxNTAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvd29rVmVyZHVyYXMuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDE1MixcbiAgICAgICAgICAgIHByb3Q6IDMuMSxcbiAgICAgICAgICAgIGdyYXNhczogMS41LFxuICAgICAgICAgICAgY2FyYnM6IDEyLjEsXG4gICAgICAgIH0sXG4gICAgICAgIGluZ3JlZGllbnRlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdaYW5haG9yaWEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ01vcnJvbiByb2pvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDZWJvbGxhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdCcm90ZSBkZSBzb2phJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTUwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1phcGFsbGl0bycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ3VuaWRhZCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ3UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2FsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNSBnJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnRmFsYWZlbCBjb24gQmFiYSBHYW5vdXNoJyxcbiAgICAgICAgdGllbXBvOiAnMzBtaW4nLFxuICAgICAgICBjb3N0bzogMjAwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL2ZhbGFmZWwuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDM1MCxcbiAgICAgICAgICAgIHByb3Q6IDEwLjEsXG4gICAgICAgICAgICBncmFzYXM6IDQuNSxcbiAgICAgICAgICAgIGNhcmJzOiA4NS4xLFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUGFuIGRlIFBpdGEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICczJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NoaWxpJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDaWxhbnRybycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ3VuaWRhZCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ3UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnR2FyYmFuem9zJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMjAwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0xlY2h1Z2EnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NlYm9sbGEgbW9yYWRhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdZb2d1cnQgbmF0dXJhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnbWlsaWxpdHJvcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ21sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0xpbWEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnQ3VycnkgZGUgQnLDs2NvbGknLFxuICAgICAgICB0aWVtcG86ICcyNW1pbicsXG4gICAgICAgIGNvc3RvOiAxNzAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvY3VycnlCcm9jb2xpLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAxMjUsXG4gICAgICAgICAgICBwcm90OiA0LjMsXG4gICAgICAgICAgICBncmFzYXM6IDAuNixcbiAgICAgICAgICAgIGNhcmJzOiAyMC4xLFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQnLDs2NvbGknLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICczIHUnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ3VuaWRhZCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ3UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTW9ycm9uIHZlcmRlJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSB1JyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0N1cnJ5JyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSBjZGEnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2N1Y2hhcmFkYScsXG4gICAgICAgICAgICAgICAgYWJicjogJ2NkYScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDZWJvbGxhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSB1JyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0xlY2hlJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMjAwIG1sJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdtaWxpbGl0cm9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnbWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQ2FsZG8gZGUgdmVyZHVyYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwMCBtbCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnbWlsaWxpdHJvcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ21sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0VzcGluYWNhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBam8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnQmVyZW5qZW5hcyBQYXJtZXNhbmFzJyxcbiAgICAgICAgdGllbXBvOiAnMzBtaW4nLFxuICAgICAgICBjb3N0bzogMjEwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL2JlcmVuamVuYXNQYXJtZS5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMjgwLFxuICAgICAgICAgICAgcHJvdDogNS44LFxuICAgICAgICAgICAgZ3Jhc2FzOiAzLjMsXG4gICAgICAgICAgICBjYXJiczogMzYuNSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ2JlcmVuamVuYXMnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdraWxvJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAna2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSGFyaW5hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1F1ZXNvIHBhcm1lc2FubycsXG4gICAgICAgICAgICAgICAgY2FudDogJzI1MCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdIYXJpbmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxNTAnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnVG9tYXRlIHRyaXR1cmFkbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzUwMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBbGJhaGFjYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ3VuaWRhZCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ3UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTW96YXJlbGxhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNTAwIGcnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdFbnNhbGFkYSBUaGFpIGRlIEZpZGVvcyBkZSBBcnJveicsXG4gICAgICAgIHRpZW1wbzogJzE1bWluJyxcbiAgICAgICAgY29zdG86IDEyMCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9lbnNhbGFkYVRoYWkuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDEwMixcbiAgICAgICAgICAgIHByb3Q6IDEuMixcbiAgICAgICAgICAgIGdyYXNhczogMC4yLFxuICAgICAgICAgICAgY2FyYnM6IDYuMSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0Jyb3RlcyBkZSBzb2phJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNTAnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQ2hpbGUnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NpbGFudHJvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQZXBpbm8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0xpbWEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NlYm9sbGEgbW9yYWRhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNb3Jyb24gcm9qbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ3VuaWRhZCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ3UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdFbnNhbGFkYSBkZSBQYXN0YSB5IEF0w7puJyxcbiAgICAgICAgdGllbXBvOiAnMjBtaW4nLFxuICAgICAgICBjb3N0bzogMTgwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL2Vuc2FsYWRhUGFzdGEuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDIzMCxcbiAgICAgICAgICAgIHByb3Q6IDguMSxcbiAgICAgICAgICAgIGdyYXNhczogMi40LFxuICAgICAgICAgICAgY2FyYnM6IDM4LjYsXG4gICAgICAgIH0sXG4gICAgICAgIGluZ3JlZGllbnRlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdSaWdhdG9uaScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdUb21hdGUnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0FsYmFoYWNhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBdMO6biBuYXR1cmFsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMzAwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ01vcnLDs24gcm9qbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ3VuaWRhZCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ3UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnVG9tYXRlcyBzZWNvcyBoaWRyYXRhZG9zJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNicsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBY2VpdGUgZGUgT2xpdmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICczMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnbWlsaWxpdHJvcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ21sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnUG9sbG8gYWwgQ3VycnknLFxuICAgICAgICB0aWVtcG86ICcyMCBtaW4nLFxuICAgICAgICBjb3N0bzogMTYwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL3BvbGxvQ3VycnkuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDE0MSxcbiAgICAgICAgICAgIHByb3Q6IDYuMixcbiAgICAgICAgICAgIGdyYXNhczogMi40LFxuICAgICAgICAgICAgY2FyYnM6IDExLjMsXG4gICAgICAgIH0sXG4gICAgICAgIGluZ3JlZGllbnRlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQZWNodWdhIGRlIHBvbGxvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdUb21hdGUgdHJpdHVyYWRvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMjAwIGcnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQ2lsYW50cm8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NlYm9sbGEgZGUgdmVyZGVvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdDdXJyeScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2N1Y2hhcmFkYScsXG4gICAgICAgICAgICAgICAgYWJicjogJ2NkYScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdMZWNoZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnbWlsaWxpdHJvcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ21sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0Fycm96JyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMjAwIGcnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG5dO1xuZXhwb3J0IHZhciBkZXNheXVub3MgPSBbXG4gICAge1xuICAgICAgICB0aXR1bG86ICdDcnVtYmxlIGRlIE1hbnphbmEnLFxuICAgICAgICB0aWVtcG86ICcxMG1pbicsXG4gICAgICAgIGNvc3RvOiA3MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9jcnVtYmxlTWFuemFuYS5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMTg5LFxuICAgICAgICAgICAgcHJvdDogMi4yLFxuICAgICAgICAgICAgZ3Jhc2FzOiAxLjUsXG4gICAgICAgICAgICBjYXJiczogNDIuMSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ01hbnphbmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0F6dWNhciBpbnRlZ3JhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0F2ZW5hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNTAnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUGFzYXMgZGUgdXZhcycsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0VzZW5jaWEgZGUgdmFpbmlsbGEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1JyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdtaWxpbGl0cm9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnbWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQ2FuZWxhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnY3VjaGFyYWRhJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnY2RhJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ2hhcmluYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0dWxvOiAnU2FuZHdpY2ggZGUgVG9mdScsXG4gICAgICAgIHRpZW1wbzogJzVtaW4nLFxuICAgICAgICBjb3N0bzogMTAwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL3NhbmR3aWNoVG9mdS5wbmcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMTM1LFxuICAgICAgICAgICAgcHJvdDogNS4xLFxuICAgICAgICAgICAgZ3Jhc2FzOiAyLjEsXG4gICAgICAgICAgICBjYXJiczogMzYuMixcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BhbiBMYWN0YWwgaW50ZWdyYWwnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1RvZnUnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxMDAnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUsO6Y3VsYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ3VuaWRhZCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ3UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2VtaWxsYXMgZGUgY2FsYWJhemEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdRdWVzbyBjcmVtYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NlbWlsbGEgZGUgemFwYWxsbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzInLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdZb2d1ciBkZSBjaXRyaWNvcycsXG4gICAgICAgIHRpZW1wbzogJzEwbWluJyxcbiAgICAgICAgY29zdG86IDEzMCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy95b2d1dENpdHJpY28uanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDgwLFxuICAgICAgICAgICAgcHJvdDogMC40LFxuICAgICAgICAgICAgZ3Jhc2FzOiAyLjMsXG4gICAgICAgICAgICBjYXJiczogMTUuOCxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1lvZ3VyIG5hdHVyYWwnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyNTAnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUG9tZWxvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNYW5kYXJpbmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ05hcmFuamEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ21pZWwnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdjdWNoYXJhZGEnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdjZGEnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2VtaWxsYSBkZSB6YXBhbGxvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMycsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ1Rvc3RhZGEgY29uIHBhbHRhIHkgaHVldm8nLFxuICAgICAgICB0aWVtcG86ICc1bWluJyxcbiAgICAgICAgY29zdG86IDgwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL3BhblBhbHRhLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAxMzYsXG4gICAgICAgICAgICBwcm90OiA0LjUsXG4gICAgICAgICAgICBncmFzYXM6IDUuNCxcbiAgICAgICAgICAgIGNhcmJzOiAyNi4xLFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUGFuIExhY3RhbCBpbnRlZ3JhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzInLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ3VuaWRhZCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ3UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUGFsdGEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0hldXZvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdTYWwnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BpbWllbnRhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ1BhbnF1ZXF1ZSBkZSBCYW5hbmEnLFxuICAgICAgICB0aWVtcG86ICcxMG1pbicsXG4gICAgICAgIGNvc3RvOiA4MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy90b3J0aWxsYUJhbmFuYS5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMTIwLFxuICAgICAgICAgICAgcHJvdDogNC44LFxuICAgICAgICAgICAgZ3Jhc2FzOiAxLjIsXG4gICAgICAgICAgICBjYXJiczogMjMuOCxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0JhbmFuYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzInLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ3VuaWRhZCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ3UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnaHVldm8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0FyYW5kYW5vcycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0FjZWl0ZSBkZSBvbGl2YScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgY2RhJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdjdWNoYXJhZGEnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdjZGEnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2FsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMicsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ0NyZXAgZGUgamFtb24geSBxdWVzbycsXG4gICAgICAgIHRpZW1wbzogJzEwbWluJyxcbiAgICAgICAgY29zdG86IDE1MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9jcmVwSllRLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAxODksXG4gICAgICAgICAgICBwcm90OiA2LjIsXG4gICAgICAgICAgICBncmFzYXM6IDUuOCxcbiAgICAgICAgICAgIGNhcmJzOiA0Mi4xLFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSHVldm8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0hhcmluYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0xlY2hlJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdtaWxpbGl0cm9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnbWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSmFtb24nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICczMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNb3phcmVsYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzQwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ01hbnRlY2EnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1JyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzInLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdIdW1tdXMgY29uIHphbmFob3JpYScsXG4gICAgICAgIHRpZW1wbzogJzEwbWluJyxcbiAgICAgICAgY29zdG86IDYwLFxuICAgICAgICBpbWc6ICdhc3NldHMvaW1nL2h1bW11cy5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMTIwLFxuICAgICAgICAgICAgcHJvdDogOS4yLFxuICAgICAgICAgICAgZ3Jhc2FzOiA1LjEsXG4gICAgICAgICAgICBjYXJiczogNi44LFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnR2FyYmFuem9zJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMjAwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1RhaGluaScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2N1Y2hhcmFkYScsXG4gICAgICAgICAgICAgICAgYWJicjogJ2NkYScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBY2VpdGUgZGUgb2xpdmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdjdWNoYXJhZGEnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdjZGEnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQWpvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdaYW5haG9yaWEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzInLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdHYWxsZXRpdGFzIGRlIEJhbmFuYScsXG4gICAgICAgIHRpZW1wbzogJzIwbWluJyxcbiAgICAgICAgY29zdG86IDE5MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9nYWxsZXRhQmFuYW5hLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAyMzAsXG4gICAgICAgICAgICBwcm90OiA3LjgsXG4gICAgICAgICAgICBncmFzYXM6IDUuOCxcbiAgICAgICAgICAgIGNhcmJzOiAyOS40LFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnQmFuYW5hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMicsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdBdmVuYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzUwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0hhcmluYSBkZSBhbG1lbmRyYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzUwIGcnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTWllbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzUwIGcnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2FsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMyBnJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHBhc29zOiBbXG4gICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCAnLFxuICAgICAgICAgICAgJ0R1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtJyxcbiAgICAgICAgICAgICdTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuXTtcbmV4cG9ydCB2YXIgZGVmYXVsdENvbWlkYXMgPSBbXG4gICAge1xuICAgICAgICB0aXR1bG86ICdUb3N0YWRhIGNvbiBwYWx0YSB5IGh1ZXZvJyxcbiAgICAgICAgdGllbXBvOiAnNW1pbicsXG4gICAgICAgIGNvc3RvOiA4MCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9wYW5QYWx0YS5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMTM2LFxuICAgICAgICAgICAgcHJvdDogNC41LFxuICAgICAgICAgICAgZ3Jhc2FzOiA1LjQsXG4gICAgICAgICAgICBjYXJiczogMjYuMSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BhbiBMYWN0YWwgaW50ZWdyYWwnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcyJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1BhbHRhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdIZXV2bycsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1NhbCcsXG4gICAgICAgICAgICAgICAgY2FudDogJzIgZycsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQaW1pZW50YScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEgZycsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ1BvbGxvIGFsIGxpbcOzbiBjb24gdmVyZHVyYXMnLFxuICAgICAgICB0aWVtcG86ICcxNW1pbicsXG4gICAgICAgIGNvc3RvOiAxNTAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvcG9sbG9BbExpbW9uLmpwZycsXG4gICAgICAgIGRhdG9zOiB7XG4gICAgICAgICAgICBrY2FsOiAyNDIsXG4gICAgICAgICAgICBwcm90OiA3LjgsXG4gICAgICAgICAgICBncmFzYXM6IDYuNSxcbiAgICAgICAgICAgIGNhcmJzOiAzNi42LFxuICAgICAgICB9LFxuICAgICAgICBpbmdyZWRpZW50ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnUG9sbG8nLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdraWxvJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAna2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSHVldm9zJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMicsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdMZWNoZScsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnbWlsaWxpdHJvcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ21sJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0hhcmluYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzE1MCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdQYW4gcmFsbGFkbycsXG4gICAgICAgICAgICAgICAgY2FudDogJzIwMCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdTYWwnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1JyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0NyZW1hIGJhamFzIGNhbG9yw61hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdtaWxpbGl0cm9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnbWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcGFzb3M6IFtcbiAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sICcsXG4gICAgICAgICAgICAnRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0nLFxuICAgICAgICAgICAgJ1NlZCB1dCBwZXJzcGljaWF0aXMgdW5kZSBvbW5pcyBpc3RlIG5hdHVzIGVycm9yIHNpdCB2b2x1cHRhdGVtIGFjY3VzYW50aXVtIGRvbG9yZW1xdWUgbGF1ZGFudGl1bSwnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXR1bG86ICdDcmVwIGRlIGphbW9uIHkgcXVlc28nLFxuICAgICAgICB0aWVtcG86ICcxMG1pbicsXG4gICAgICAgIGNvc3RvOiAxNTAsXG4gICAgICAgIGltZzogJ2Fzc2V0cy9pbWcvY3JlcEpZUS5qcGcnLFxuICAgICAgICBkYXRvczoge1xuICAgICAgICAgICAga2NhbDogMTg5LFxuICAgICAgICAgICAgcHJvdDogNi4yLFxuICAgICAgICAgICAgZ3Jhc2FzOiA1LjgsXG4gICAgICAgICAgICBjYXJiczogNDIuMSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5ncmVkaWVudGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0h1ZXZvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSB1JyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICd1bmlkYWQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0hhcmluYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzEwIGcnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTGVjaGUnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxMDAgbWwnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ21pbGlsaXRyb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdtbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdKYW1vbicsXG4gICAgICAgICAgICAgICAgY2FudDogJzMwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ01vemFyZWxhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNDAnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnTWFudGVjYScsXG4gICAgICAgICAgICAgICAgY2FudDogJzUnLFxuICAgICAgICAgICAgICAgIG1lZGlkYTogJ2dyYW1vcycsXG4gICAgICAgICAgICAgICAgYWJicjogJ2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnU2FsJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMicsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdHVsbzogJ0JlcmVuamVuYXMgUGFybWVzYW5hcycsXG4gICAgICAgIHRpZW1wbzogJzMwbWluJyxcbiAgICAgICAgY29zdG86IDIxMCxcbiAgICAgICAgaW1nOiAnYXNzZXRzL2ltZy9iZXJlbmplbmFzUGFybWUuanBnJyxcbiAgICAgICAgZGF0b3M6IHtcbiAgICAgICAgICAgIGtjYWw6IDI4MCxcbiAgICAgICAgICAgIHByb3Q6IDUuOCxcbiAgICAgICAgICAgIGdyYXNhczogMy4zLFxuICAgICAgICAgICAgY2FyYnM6IDM2LjUsXG4gICAgICAgIH0sXG4gICAgICAgIGluZ3JlZGllbnRlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdiZXJlbmplbmFzJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMSBLaWxvJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdraWxvJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAna2cnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiAnSGFyaW5hJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMTAwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ1F1ZXNvIHBhcm1lc2FubycsXG4gICAgICAgICAgICAgICAgY2FudDogJzI1MCcsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdIYXJpbmEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICcxNTAgZycsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdUb21hdGUgdHJpdHVyYWRvJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnNTAwJyxcbiAgICAgICAgICAgICAgICBtZWRpZGE6ICdncmFtb3MnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXRlbTogJ0FsYmFoYWNhJyxcbiAgICAgICAgICAgICAgICBjYW50OiAnMScsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAndW5pZGFkJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAndScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06ICdNb3phcmVsbGEnLFxuICAgICAgICAgICAgICAgIGNhbnQ6ICc1MDAgZycsXG4gICAgICAgICAgICAgICAgbWVkaWRhOiAnZ3JhbW9zJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBwYXNvczogW1xuICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgJyxcbiAgICAgICAgICAgICdEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bScsXG4gICAgICAgICAgICAnU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLCcsXG4gICAgICAgIF0sXG4gICAgfSxcbl07XG4iLCJpbXBvcnQgeyBwcmVmZXJlbmNpYXMgfSBmcm9tICcuL2RiJztcbmltcG9ydCB7IHZvbHZlciB9IGZyb20gJy4vdXRpbCc7XG52YXIgc3dpcGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dpcGUnKTtcbmZ1bmN0aW9uIHNldFNjYWxlKGluZGV4KSB7XG4gICAgcmV0dXJuIDEgLSAocHJlZmVyZW5jaWFzLmxlbmd0aCAtIGluZGV4KSAqIDAuMDE7XG59XG5mdW5jdGlvbiBzZXRJbWFnZW5lcygpIHtcbiAgICAvLyAgcmVmYWN0b3JcbiAgICB2YXIgaW5pdGlhbFggPSAwO1xuICAgIHN3aXBlLmlubmVySFRNTCA9ICcnO1xuICAgIHByZWZlcmVuY2lhcy5sZW5ndGggPT09IDBcbiAgICAgICAgPyAobG9jYXRpb24uaHJlZiA9IFwiaHR0cDovL1wiICsgbG9jYXRpb24uaG9zdCArIFwiL3BlcmZpbDQuaHRtbFwiKVxuICAgICAgICA6IG51bGw7XG4gICAgcHJlZmVyZW5jaWFzLm1hcChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY2FyZC5pZCA9IFwiXCIgKyBpbmRleDtcbiAgICAgICAgdmFyIHMgPSBpbmRleCAtIHByZWZlcmVuY2lhcy5sZW5ndGg7XG4gICAgICAgIGNhcmQuaW5uZXJIVE1MID0gXCI8ZGl2IGlkPVxcXCJcIiArIGluZGV4ICsgXCIzXFxcIj4gPGRpdiBjbGFzcz1cXFwiaW1nLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcImltZ1xcXCIgc3R5bGU9XFxcImJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIGl0ZW0udXJsICsgXCIpO1xcXCIgIGFsdD1cXFwiXCIgKyBpdGVtLnRpdHVsbyArIFwiXFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9uZG8taW1nXFxcIiBzdHlsZT1cXFwiYmFja2dyb3VuZDogXCIgKyBpdGVtLmZvbmRvICsgXCJcXFwiPiA8L2Rpdj4gIDwvZGl2PiA8ZGl2IHRhYmluZGV4PVxcXCIwXFxcIiBpZD1cXFwiXCIgKyBpdGVtLnRpdHVsbyArIFwiXFxcIj4gPHAgY2xhc3M9XFxcInNyLW9ubHlcXFwiPiBQcmVmZXJuY2lhcyBcIiArIHByZWZlcmVuY2lhcy5sZW5ndGggKyBcIiBkZSA0IDxQPiA8aDMgY2xhc3M9XFxcIm1sLTA1IG15LTFcXFwiID5cIiArIGl0ZW0udGl0dWxvICsgXCI8L2gzPiA8cCBjbGFzcz1cXFwibWwtMDUgdGV4dC1saWdodCBteS0xXFxcIj5cIiArIGl0ZW0uZGVzY3JpcGNpb24gKyBcIjwvcD4gPC9kaXY+IDwvZGl2PlwiO1xuICAgICAgICBjYXJkLmNsYXNzTGlzdC5hZGQoJ3N3aXBlLWl0ZW0nKTtcbiAgICAgICAgdmFyIHogPSAoaW5kZXggKyAxKSAqIDEwO1xuICAgICAgICB2YXIgbWFyZ2luID0gaW5kZXggKiAtMTAgKyBcInB4XCI7XG4gICAgICAgIGNhcmQuc3R5bGUuc2V0UHJvcGVydHkoJ3otaW5kZXgnLCB6LnRvU3RyaW5nKCkpO1xuICAgICAgICBjYXJkLnN0eWxlLnNldFByb3BlcnR5KCd0b3AnLCBtYXJnaW4pO1xuICAgICAgICBzd2lwZS5hcHBlbmRDaGlsZChjYXJkKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSBwcmVmZXJlbmNpYXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgY2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNmb3JtJywgXCJzY2FsZShcIiArIHNldFNjYWxlKGluZGV4KSArIFwiKVwiKTtcbiAgICAgICAgICAgIHZhciBoaWRkZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbmRleCArIFwiM1wiKTtcbiAgICAgICAgICAgIGhpZGRlbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGl0dWxvQ2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0udGl0dWxvKTtcbiAgICAgICAgcHJlZmVyZW5jaWFzLmxlbmd0aCAhPT0gNCA/IHRpdHVsb0NhcmQuZm9jdXMoKSA6IG51bGw7XG4gICAgfSk7XG4gICAgdmFyIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiXCIgKyAocHJlZmVyZW5jaWFzLmxlbmd0aCAtIDEpKTtcbiAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG1vdmUpO1xuICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG1vdmVFbmQpO1xuICAgIGZ1bmN0aW9uIG1vdmUoZSkge1xuICAgICAgICBpbml0aWFsWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbW92ZUVuZChlKSB7XG4gICAgICAgIHZhciBmaW5hbFggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAgIHZhciByZXN1bHQgPSBmaW5hbFggLSBpbml0aWFsWDtcbiAgICAgICAgY29uc29sZS5sb2coZmluYWxYLCByZXN1bHQsIGluaXRpYWxYKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKHJlc3VsdCkgPD0gNjApIHtcbiAgICAgICAgICAgIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5pdGlhbFggPj0gZmluYWxYKSB7XG4gICAgICAgICAgICBpbWcuY2xhc3NMaXN0LmFkZCgnc2FsaXJJenEnKTtcbiAgICAgICAgICAgIHByZWZlcmVuY2lhcy5zcGxpY2UoLTEsIDEpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2V0SW1hZ2VuZXMoKTtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW1nLmNsYXNzTGlzdC5hZGQoJ3NhbGlyRGVyJyk7XG4gICAgICAgICAgICBwcmVmZXJlbmNpYXMuc3BsaWNlKC0xLCAxKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNldEltYWdlbmVzKCk7XG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbnNldEltYWdlbmVzKCk7XG52YXIgYWNlcHRhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY2VwdGFyJyk7XG52YXIgcmVjaGF6YXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVjaGF6YXInKTtcbnZhciBidXR0b25Db250aW51YXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGludWFyJyk7XG5hY2VwdGFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWNlcHRhclByZWZlcmVuY2lhKTtcbnJlY2hhemFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVjaGF6YXJQcmVmZXJlbmNpYSk7XG5mdW5jdGlvbiBhY2VwdGFyUHJlZmVyZW5jaWEoKSB7XG4gICAgdmFyIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiXCIgKyAocHJlZmVyZW5jaWFzLmxlbmd0aCAtIDEpKTtcbiAgICBpbWcuY2xhc3NMaXN0LmFkZCgnc2FsaXJEZXInKTtcbiAgICBwcmVmZXJlbmNpYXMuc3BsaWNlKC0xLCAxKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0SW1hZ2VuZXMoKTtcbiAgICB9LCAxMDAwKTtcbn1cbmZ1bmN0aW9uIHJlY2hhemFyUHJlZmVyZW5jaWEoKSB7XG4gICAgdmFyIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiXCIgKyAocHJlZmVyZW5jaWFzLmxlbmd0aCAtIDEpKTtcbiAgICBpbWcuY2xhc3NMaXN0LmFkZCgnc2FsaXJJenEnKTtcbiAgICBwcmVmZXJlbmNpYXMuc3BsaWNlKC0xLCAxKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0SW1hZ2VuZXMoKTtcbiAgICB9LCAxMDAwKTtcbn1cbmZ1bmN0aW9uIGdvVG9QZXJmaWw0KCkge1xuICAgIGxvY2F0aW9uLmhyZWYgPSBcImh0dHA6Ly9cIiArIGxvY2F0aW9uLmhvc3QgKyBcIi9wZXJmaWw0Lmh0bWxcIjtcbn1cbmJ1dHRvbkNvbnRpbnVhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGdvVG9QZXJmaWw0LCB0cnVlKTtcbnZhciBidXR0b25Wb2x2ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndm9sdmVyJyk7XG5idXR0b25Wb2x2ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB2b2x2ZXIpO1xuIiwiZXhwb3J0IHZhciB2b2x2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGlzdG9yeS5iYWNrKCk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==