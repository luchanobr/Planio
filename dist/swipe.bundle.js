(()=>{"use strict";var e=[{url:"assets/img/chili.png",fondo:" rgb(255,173, 154)",titulo:"Chili",descripcion:"Pimenton, ajos o morrones de diversos tipos. Son utilizados en diversas recetas."},{url:"assets/img/ostras.png",fondo:"rgb(174, 254, 209)",titulo:"Ostras",descripcion:"Poseen un gran valor nutricional y son utilizadas mayormente como acompañamiento."},{url:"assets/img/huevos.png",fondo:"rgb(190, 182, 140)",titulo:"huevos",descripcion:"Es un alimento muy práctico y altamente nutritivo que debe formar parte de la dieta habitual."},{url:"assets/img/brocoli.png",fondo:"rgb(174, 254, 209)",titulo:"Brocoli",descripcion:"Rico en proteínas, hierro, calcio, vitaminas y minerales, un producto esencial para aquellos que buscan un alimento saludable."}],t=document.getElementById("swipe");function n(){var i=0;t.innerHTML="",0===e.length&&(location.href="http://"+location.host+"/perfil4.html"),e.map((function(n,i){var o=document.createElement("div");o.id=""+i,e.length,o.innerHTML='<div id="'+i+'3"> <div class="img-container"> <div class="img" style="background-image: url('+n.url+');"  alt="'+n.titulo+'"></div> <div class="fondo-img" style="background: '+n.fondo+'"> </div>  </div> <div tabindex="0" id="'+n.titulo+'"> <p class="sr-only"> Preferncias '+e.length+' de 4 <P> <h3 class="ml-05 my-1" >'+n.titulo+'</h3> <p class="ml-05 text-light my-1">'+n.descripcion+"</p> </div> </div>",o.classList.add("swipe-item");var s=10*(i+1),a=-10*i+"px";o.style.setProperty("z-index",s.toString()),o.style.setProperty("top",a),t.appendChild(o),i!==e.length-1&&(o.style.setProperty("transform","scale("+function(t){return 1-.01*(e.length-t)}(i)+")"),document.getElementById(i+"3").setAttribute("aria-hidden","true"));var l=document.getElementById(n.titulo);4!==e.length&&l.focus()}));var o=document.getElementById(""+(e.length-1));o.addEventListener("touchstart",(function(e){i=e.changedTouches[0].clientX})),o.addEventListener("touchend",(function(t){var s=t.changedTouches[0].clientX,a=s-i;console.log(s,a,i),Math.abs(a)<=60||(i>=s?(o.classList.add("salirIzq"),e.splice(-1,1),setTimeout((function(){n()}),1e3)):(o.classList.add("salirDer"),e.splice(-1,1),setTimeout((function(){n()}),1e3)))}))}n();var i=document.getElementById("aceptar"),o=document.getElementById("rechazar"),s=document.getElementById("continuar");i.addEventListener("click",(function(){document.getElementById(""+(e.length-1)).classList.add("salirDer"),e.splice(-1,1),setTimeout((function(){n()}),1e3)})),o.addEventListener("click",(function(){document.getElementById(""+(e.length-1)).classList.add("salirIzq"),e.splice(-1,1),setTimeout((function(){n()}),1e3)})),s.addEventListener("click",(function(){location.href="http://"+location.host+"/perfil4.html"}),!0),document.getElementById("volver").addEventListener("click",(function(){history.back()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,