(()=>{"use strict";var x=[{url:"assets/img/chili.png",fondo:" rgb(255,173, 154)",titulo:"Chili",descripcion:"Pimenton, ajos o morrones de diversos tipos. Son utilizados en diversas recetas."},{url:"assets/img/ostras.png",fondo:"rgb(174, 254, 209)",titulo:"Ostras",descripcion:"Poseen un gran valor nutricional y son utilizadas mayormente como acompa√±amiento"},{url:"assets/img/huevos.png",fondo:"rgb(190, 182, 140)",titulo:"huevos",descripcion:"xxxx xxxxx xxxxx xxxxxxx xxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxxx xxxxxxxxxxxxx xxx"},{url:"assets/img/brocoli.png",fondo:"rgb(174, 254, 209)",titulo:"Brocoli",descripcion:"xxxx xxxxx xxxxx xxxxxxx xxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxxx xxxxxxxxxxxxx xxx"}],e=document.getElementById("swipe");function t(){var n=0;e.innerHTML="",0===x.length&&(location.href="http://"+location.host+"/perfil4.html"),x.map((function(t,n){var i=document.createElement("div");i.id=""+n,x.length,i.innerHTML='<div id="'+n+'3" > <div class="img-container"> <div class="img" style="background-image: url('+t.url+');"></div> <div class="fondo-img" style="background: '+t.fondo+'"> </div>  </div>  <h3 class="ml-05 my-1">'+t.titulo+'</h3> <p class="ml-05 text-light my-1">'+t.descripcion+"</p> </div>",i.classList.add("swipe-item");var o=10*(n+1),s=-10*n+"px";i.style.setProperty("z-index",o.toString()),i.style.setProperty("top",s),e.appendChild(i),n!==x.length-1&&(i.style.setProperty("transform","scale("+function(e){return 1-.01*(x.length-e)}(n)+")"),document.getElementById(n+"3").setAttribute("aria-hidden","true")),4!==x.length&&i.focus()}));var i=document.getElementById(""+(x.length-1));i.addEventListener("touchstart",(function(x){n=x.changedTouches[0].clientX})),i.addEventListener("touchend",(function(e){var o=e.changedTouches[0].clientX,s=o-n;console.log(o,s,n),Math.abs(s)<=60||(n>=o?(i.classList.add("salirIzq"),x.splice(-1,1),setTimeout((function(){t()}),1e3)):(i.classList.add("salirDer"),x.splice(-1,1),setTimeout((function(){t()}),1e3)))}))}t();var n=document.getElementById("aceptar"),i=document.getElementById("rechazar"),o=document.getElementById("continuar");n.addEventListener("click",(function(){document.getElementById(""+(x.length-1)).classList.add("salirDer"),x.splice(-1,1),setTimeout((function(){t()}),1e3)})),i.addEventListener("click",(function(){document.getElementById(""+(x.length-1)).classList.add("salirIzq"),x.splice(-1,1),setTimeout((function(){t()}),1e3)})),o.addEventListener("click",(function(){location.href="http://"+location.host+"/perfil4.html"}),!0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,