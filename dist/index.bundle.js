(()=>{"use strict";var t=[{titulo:"Tostada con palta y huevo",tiempo:"5min",costo:80,img:"assets/img/panPalta.jpg",datos:{kcal:136,prot:4.5,grasas:5.4,carbs:26.1},ingredientes:[{item:"Pan Lactal integral",cant:"2 u"},{item:"Palta",cant:"1 u"},{item:"Heuvo",cant:"1 u"},{item:"Sal",cant:"2 g"},{item:"Pimienta",cant:"1 g"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]},{titulo:"Pollo al limón con verduras",tiempo:"15min",costo:150,img:"assets/img/polloAlLimon.jpg",datos:{kcal:242,prot:7.8,grasas:6.5,carbs:36.6},ingredientes:[{item:"Pollo",cant:"1 kilo"},{item:"Huevos",cant:"2 u"},{item:"Leche",cant:"300 ml"},{item:"Harina",cant:"150 g"},{item:"Pan rallado",cant:"200 g"},{item:"Sal",cant:"5 g"},{item:"Crema bajas caloría",cant:"100 ml"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]},{titulo:"Crep de jamon y queso",tiempo:"10min",costo:150,img:"assets/img/crepJYQ.jpg",datos:{kcal:189,prot:6.2,grasas:5.8,carbs:42.1},ingredientes:[{item:"Huevo",cant:"1 u"},{item:"Harina",cant:"10 g"},{item:"Leche",cant:"100 ml"},{item:"Jamon",cant:"30 g"},{item:"Mozarela",cant:"40 g"},{item:"Manteca",cant:"5 g"},{item:"Sal",cant:"2 g"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]},{titulo:"Berenjenas Parmesanas",tiempo:"30min",costo:210,img:"assets/img/berenjenasParme.jpg",datos:{kcal:280,prot:5.8,grasas:3.3,carbs:36.5},ingredientes:[{item:"berenjenas",cant:"1 Kilo"},{item:"Harina",cant:"100 g"},{item:"Queso parmesano",cant:"250 g"},{item:"Harina",cant:"150 g"},{item:"Tomate triturado",cant:"500 g"},{item:"Albahaca",cant:"1 atado"},{item:"Mozarella",cant:"500 g"}],pasos:["Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, ","Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum","Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,"]}];document.addEventListener("load",(function(){return e=this,a=void 0,n=function(){var e;return function(t,e){var a,i,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;r;)try{if(a=1,i&&(n=2&o[0]?i.return:o[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,o[1])).done)return n;switch(i=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,i=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!((n=(n=r.trys).length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=e.call(t,r)}catch(t){o=[6,t],i=0}finally{a=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(a){switch(a.label){case 0:return localStorage.removeItem("planio"),(e={}).comidas=t,function(t){var e=JSON.stringify(t);localStorage.setItem("planio",e)}(e),[4,setTimeout((function(){location.href="http://"+location.host+"/perfil1.html"}),3e3)];case 1:return a.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(t,o){function r(t){try{s(n.next(t))}catch(t){o(t)}}function u(t){try{s(n.throw(t))}catch(t){o(t)}}function s(e){var a;e.done?t(e.value):(a=e.value,a instanceof i?a:new i((function(t){t(a)}))).then(r,u)}s((n=n.apply(e,a||[])).next())}));var e,a,i,n}),!0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,